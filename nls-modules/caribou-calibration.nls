globals [
 
 car-var-soln-fit-list
 car-var-soln-list 
  
]

to setup-caribou-var-cal 
  ;print "this is a test to see if setup-car-var-cal is being called"
  set car-var-soln-fit-list [ ]
  set car-var-soln-list [ ]
  set caribouVarCal [ ] 
  set caribou-var-E-diff [ ]
  ifelse randomCaribouVarStart?
    [
      ;print "testing to see if random assignment occurs."
      ;;need to do: check to see if any division by zero errors will occur in caribou utility functions due to random number gen.
      repeat 9 [
        ;;from left to right, the variables are: decay-rate, energy-gain, ndvi-weight, caribou-veg-factor, caribou-rough-factor, caribou-insect-factor,
        ;;caribou-modifier-factor, caribou-deflection-factor, caribou-precip-factor.
        set caribouVarCal lput random-num 1 caribouVarCal
      ]
    ]
    [
      ;;set caribouVarCal starting values..
      set caribouVarCal lput decay-rate caribouVarCal
      set caribouVarCal lput (energy-gain-factor / 100) caribouVarCal
      set caribouVarCal lput ndvi-weight caribouVarCal
      set caribouVarCal lput caribou-veg-factor caribouVarCal
      set caribouVarCal lput caribou-rough-factor caribouVarCal
      set caribouVarCal lput caribou-insect-factor caribouVarCal
      set caribouVarCal lput caribou-modifier-factor caribouVarCal
      set caribouVarCal lput caribou-deflection-factor caribouVarCal
      set caribouVarCal lput caribou-precip-factor caribouVarCal
    ]
  
    
  assign-variable-values 
  if exportCaribouData? [ setup-var-file ]
end

to go-caribou-var-cal 
  let oldCaribouVarCal caribouVarCal
  let mutatedVars? 0
  let recombined? 0
  let datIn calculate-var-prob
  let varProb item 0 datIn
  let convergence item 1 datIn
  let soln-success item 2 datIn
  let fitDiff item 3 datIn
  
 
  
  ;;trigger evolution event if varProb is beaten by random-roll.
  if (random-num 1) <= varProb [
    ;;Record that an evolutionary event occurred.
    set mutatedVars? 1
    
    ;;Add in energy difference from goal energy (imported from  datIn calculate-var-prob).
    ;;Invert energy differences so minimum difference values are weighted more highly.
    set caribou-var-E-diff lput fitDiff caribou-var-E-diff
    
    let maxSuccess max caribou-var-E-diff
    
    let relSuccess map [ maxSuccess - ? ] caribou-var-E-diff
    
    ;;Add to the list of attempted variable solutions and their associated success value (relative to
    ;;desired energy goal).
    set car-var-soln-fit-list lput soln-success car-var-soln-fit-list
    set car-var-soln-list lput caribouVarCal car-var-soln-list 
    
    ;;perform recombination first if number soln with fitness > 1 is > 1
    
    ;;create temporary lists without current fitness and soln value for purpose of
    ;;weeding out current soln from recombination pool.
 
;    let t-car-var-soln-list [ ]
;    let t-car-var-soln-fit-list [ ]
;    let i 0
;    foreach car-var-soln-fit-list [
;      if ?  > 0 [
;        set t-car-var-soln-fit-list lput ? t-car-var-soln-fit-list
;        set t-car-var-soln-list lput (item i car-var-soln-list) t-car-var-soln-list 
;      ]
;      set i i + 1
;    ]
    
    
;;;;;;;;;;Caribou Variable Recombination Block;;;;;;;;;;

    if random-num 1 < prob-var-recombination [
      ;;Grab list of tried variable solutions that can be editted and discarded.
      let t-car-var-soln-list car-var-soln-list
      let soln-list [ ]
      let success-list [ ]
      
      ;;If variable solution population greater than 10, restrict possible solutions for recombination to the 10 best
      ;;possible solutions. This is to prevent the gene pool from being filled with hundreds of duds. Note that this
      ;;also means the gradient and point mutations are performed only on the 10 best possible solutions, which means
      ;;there may be a chance that the solution process will stall out at a local minima. To combat this, a probability
      ;;of recombination is introduced to allow new solutions a greater degree of workspace time before they are phased
      ;;out.
      if length relSuccess > 10 [
        repeat 10 [
          let m max relSuccess
          let pos position m relSuccess
          
          set soln-list lput (item pos t-car-var-soln-list) soln-list
          set success-list lput (item pos relSuccess) success-list
          
          set relSuccess remove-item pos relSuccess
          set t-car-var-soln-list remove-item pos t-car-var-soln-list
        ]  ]
      
      ;;each time an evolution event occurs, recombination will occur defacto if there are at least two solutions.
      ;;may edit this later to be a probabilistic event...
      ;    if length t-car-var-soln-list > 1   
      if length soln-list > 1
      [  
        ;;recomb caribou variable calibration solutions.
        set recombined? 1
        let var-genome-1 0
        let var-genome-2 0
        
        ;;build a probability list first for weighted selection.
        let prob-recomb-list build-prob-list success-list
        ;;now select boths of the lists randomly for crossing
        set var-genome-1 select-weighted-val prob-recomb-list soln-list
        set var-genome-2 select-weighted-val prob-recomb-list soln-list
        
        ;;now, we can run the recombination procedure. 
        set caribouVarCal cross-var-genome var-genome-1 var-genome-2
        
      ]
    ]
    
    let probMut 0
    let probGrad 0
    let del-soln-success 0
    
;    set probMut var-mut-prob-factor * soln-success
;    set probGrad var-grad-prob-factor * 1 / soln-success
    set probMut soln-success
    carefully [ set probGrad 1 / soln-success ] [ set probGrad 1 ]
    ;;slice last 5 solution success values (or approximately last 50 years of simulation time)
    ;;following code is WIP for trying to kick out of local minima and maxima.
;    if (length car-var-soln-list >= 5) [
;      set del-soln-success sublist car-var-soln-list (length car-var-soln-list - 5) (length car-var-soln-list)
;      let mean-soln-success mean del-soln-success
;      let sd-soln-success standard-deviation del-soln-success
;      ifelse mean-soln-success != 0 and (sd-soln-success / mean-soln-success) != 0
;      [ 
;        let probGradMod 1 / ( sd-soln-success / mean-soln-success )
;      ]
;      [
;        let probGradMod 0 
;      ]
;    ]
;    set probGrad probGrad + probGradMod


    let mutCheck False
    let gradCheck False
    
    while [ (mutCheck = False or gradCheck = False) and (mutCheck != True and gradCheck != True) ][
     if random-num 1 <= probMut [ set mutCheck True ]
     if random-num 1 <= probGrad [ set gradCheck True ] 
    ]
    
    ifelse mutCheck
    [
      ;;perform point mutation
      mutate-caribou-variables
    ]
    [
      ;;perform gradient mutation
      gradient-caribou-variables
    ]
    
    assign-variable-values
        
  ]
 
  if exportCaribouData? [ export-var-data mutatedVars? recombined? varProb convergence oldCaribouVarCal soln-success  ]
end

to gradient-caribou-variables
  let grad-list caribouVarCal
  let globalVars [ "decay-rate" "energy-gain" "ndvi-weight" "caribou-veg-factor" "caribou-rough-factor" "caribou-insect-factor" 
    "caribou-modifier-factor" "caribou-deflection-factor" "caribou-precip-factor" ] 
  let ref-list globalVars
  
  while [ length grad-list > 0 ] [
;    let grad-size random (length grad-list)
    let grad-size 2
    let grad-mod [ ]
    let ref-mod [ ]
    let pos-list [ ]
    repeat (grad-size + 1) [ 
      let rand-item random length grad-list
      
      set grad-mod lput item rand-item grad-list grad-mod
      set ref-mod lput item rand-item ref-list ref-mod
      set pos-list lput position (item rand-item ref-list) globalVars pos-list
      
      set grad-list remove-item rand-item grad-list
      set ref-list remove-item rand-item ref-list
    ]
    
    ;;now modify the variable values in grad-mod.
    ;;choosing a smaller mutate amount to reduce "jumpiness" of gradient evolution function.
    let mutateAmt ((random-num 1) - 0.5)
    let new-val 0
    let i 0
    foreach grad-mod [
      ;let 
      set new-val ? + mutateAmt
      if new-val > 1 [ set new-val 1 ]
      if new-val < 0 [ set new-val 0 ]
      set caribouVarCal replace-item (item i pos-list) caribouVarCal new-val
      set i i + 1
    ]
    
  ]
  
;  repeat num-gradients [
;   let grad-mod [ ]
;   repeat gradSize [ set grad-mod lput item (random (length grad-list - 1)) grad-list grad-mod ]
;  ]
end

to-report cross-var-genome [ genome-1 genome-2 ]
  let test? false
  
  let len-snip-1 random (length genome-1)
  let snip-1 sublist genome-1 0 len-snip-1
  
  let snip-2 sublist genome-2 len-snip-1 (length genome-2)
  
  let genome-out snip-1
  foreach snip-2 [
   set genome-out lput item ? snip-2 genome-out
  ]
  
  ;;quickly check to make sure we didn't botch the process..
  if test? [
    show genome-1
    show snip-1
    show genome-2
    show snip-2
    show genome-out
  ]
  
  report genome-out
end

to setup-var-file 
  
  let globalVars [ "decay-rate" "energy-gain" "ndvi-weight" "caribou-veg-factor" "caribou-rough-factor" "caribou-insect-factor" 
    "caribou-modifier-factor" "caribou-deflection-factor" "caribou-precip-factor" ] 
  
  let fileOut "caribou-var-calibration-data-"
  set fileOut word fileOut seed
  set fileOut word fileOut ".txt"
  
  if file-exists? fileOut [ file-delete fileOut ]
  
  file-open fileOut
  
  file-write "year"
  file-write "mean season Bio-E"
  file-write "fcm convergence"
  file-write "probability of mutation"
  file-write "mutated?"
  file-write "recombined?"
  foreach globalVars file-write
  file-write "solution success"
  ;file-print ""
  ;file-write year
  ;file-write 0
  ;file-write 0
  ;file-write 0
  ;file-write 0
  ;foreach caribouVarCal file-write
  ;file-write 0
  
  file-close
end

to export-var-data [ mutatedVars? recombined? varProb convergence oldCaribouVarCal soln-success ]
  let fileOut "caribou-var-calibration-data-"
  set fileOut word fileOut seed
  set fileOut word fileOut ".txt"
  
  ;let convergence length caribou-fcm-adja-list
  ;set convergence 1 - ( convergence / caribou-group-amt )
  
  file-open fileOut
  file-print ""
  ;file-write (year + 1)
  file-write year
  file-write mean [bioenergy-success] of caribou
  file-write convergence
  file-write varProb
  ;;for next two variables, they track with the incoming next line of variable calibration solns.
  file-write mutatedVars?
  file-write recombined?
  foreach oldCaribouVarCal file-write 
  file-write soln-success
  file-close 
end

to mutate-caribou-variables 
  
  ;ifelse item (length car-var-soln-fit-list - 1) car-var-soln-fit-list = 0 
  ;[
    ;;since we're not even close, just totally recombine the variable set.
  ;  repeat 9 [ set caribouVarCal lput random-num 1 caribouVarCal ]
    
  ;]
  ;[
    ;;if we're in the positive, then just try tweaking the variable set.
    ;;for now, just assign a mutate amt.  
    let mutateAmt (random-num 2) - 1
    let randItem (random length caribouVarCal)
    let oldVal item randItem caribouVarCal
    let newVal oldVal + mutateAmt
    
    while [ newVal <= 0 or newVal >= 1 ] [
      set mutateAmt (random-num 2) - 1
      set oldVal item randItem caribouVarCal
      set newVal oldVal + mutateAmt   
    ]
    
    set caribouVarCal replace-item randItem caribouVarCal newVal
  ;]
  
end

to assign-variable-values 
  let globalVars [ "decay-rate" "energy-gain" "ndvi-weight" "caribou-veg-factor" "caribou-rough-factor" "caribou-insect-factor" 
    "caribou-modifier-factor" "caribou-deflection-factor" "caribou-precip-factor" ] 
  
  set decay-rate item (position "decay-rate" globalVars) caribouVarCal
  set energy-gain-factor ( item (position "energy-gain" globalVars) caribouVarCal ) * 100 
  set ndvi-weight item (position "ndvi-weight" globalVars) caribouVarCal
  set caribou-veg-factor item (position "caribou-veg-factor" globalVars) caribouVarCal
  set caribou-rough-factor item (position "caribou-rough-factor" globalVars) caribouVarCal
  set caribou-insect-factor item (position "caribou-insect-factor" globalVars) caribouVarCal
  set caribou-modifier-factor item (position "caribou-modifier-factor" globalVars) caribouVarCal
  set caribou-deflection-factor item (position "caribou-deflection-factor" globalVars) caribouVarCal
  set caribou-precip-factor item (position "caribou-precip-factor" globalVars) caribouVarCal
end

to-report calculate-var-prob ;;calculates the probability of variable calibration evolutionary event occurring.
                             ;;Probability is based on the convergence of FCMs (+), and how close the current
                             ;;solution is to the ideal season-end bioenergy value for caribou agents.
  let test? true
  let datOut [ ]
  let convergence length caribou-fcm-adja-list
  set convergence 1 - ( convergence / caribou-group-amt );;divide by initial number of unique caribou FCMs to normalize the variable.
  
  ;;following values = winter energetic loss buffer range taken from Semeniuk et al. 2012 woodland caribou paper.
  let lowE 710000 
  let highE 947000
  let midE (lowE + highE) / 2
  let rng highE - lowE
  let var 5
  let fitness 0
  let avgSeasonE mean [ bioenergy-success ] of caribou

;let avgSeasonE highE + 4.9 * rng
;let avgSeasonE lowE
  
  let diff abs(midE - avgSeasonE)
  
  ;set caribou-var-E-diff lput diff caribou-var-E-diff
  
  ifelse avgSeasonE <= (highE + (var * rng) ) and avgSeasonE >= (lowE - (var * rng) )
  [
    ;;if E in reasonable range of values, base fitness on how high
    let t (rng / 2) + (var * rng)
    set fitness 1 - ( diff / t )
  ]
  [
    ifelse avgSeasonE > (highE + (var * rng) )
    [
      set fitness 0
    ]
    [
      if avgSeasonE < (lowE - (var * rng) )
      [
        set fitness 0
      ]
    ] 
  ]

  let x 0.5 let y 1
  
  let varProb (y * convergence) - (x * fitness)
  
  if test? [
    print "fitness from caribou seasonal bioE:"
    show fitness
    
    print "convergence:"
    show convergence
    
    print "probability of mutating one of caribou variables:"
    show varProb
  ]
  
  set datOut lput varProb datOut
  set datOut lput convergence datOut
  set datOut lput fitness datOut
  set datOut lput diff datOut
  
  report datOut
  
  ;report varProb
  ;report ( 1 - ((x * fitness) + (y * convergence)) )
end

to-report random-num [ num ]
  report random ((num * 1000) + 1) / 1000
end

to testcon
  let maxSuccess max caribou-var-E-diff
    
    let relSuccess map [ maxSuccess - ? ] caribou-var-E-diff

let t-car-var-soln-list car-var-soln-list
      let soln-list [ ]
      let success-list [ ]
      
      ;;If variable solution population greater than 10, restrict possible solutions for recombination to the 10 best
      ;;possible solutions. This is to prevent the gene pool from being filled with hundreds of duds. Note that this
      ;;also means the gradient and point mutations are performed only on the 10 best possible solutions, which means
      ;;there may be a chance that the solution process will stall out at a local minima. To combat this, a probability
      ;;of recombination is introduced to allow new solutions a greater degree of workspace time before they are phased
      ;;out.
      if length relSuccess > 10 [
        repeat 10 [
          let m max relSuccess
          let pos position m relSuccess
          
          set soln-list lput (item pos t-car-var-soln-list) soln-list
          set success-list lput (item pos relSuccess) success-list
          
          set relSuccess remove-item pos relSuccess
          set t-car-var-soln-list remove-item pos t-car-var-soln-list
        ]  ]
      
      ;;each time an evolution event occurs, recombination will occur defacto if there are at least two solutions.
      ;;may edit this later to be a probabilistic event...
      ;    if length t-car-var-soln-list > 1   
      if length soln-list > 1
      [  
        ;;recomb caribou variable calibration solutions.
;        set recombined? 1
        let var-genome-1 0
        let var-genome-2 0
        
        ;;build a probability list first for weighted selection.
        let prob-recomb-list build-prob-list success-list
        ;;now select boths of the lists randomly for crossing
        set var-genome-1 select-weighted-val prob-recomb-list soln-list
        set var-genome-2 select-weighted-val prob-recomb-list soln-list
        
        ;;now, we can run the recombination procedure. 
        set caribouVarCal cross-var-genome var-genome-1 var-genome-2
        
      ]
end