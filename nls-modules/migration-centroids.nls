to build-mean-utility-lists
  ask patches [set cent-util-list-non-para lput caribou-utility-non-para cent-util-list-non-para]
  ask patches [set cent-util-list-para lput caribou-utility-para cent-util-list-para]
end

to centroid-test
  set cent-day-list lput day cent-day-list



   ask patches with [ocean = 0] [
    set npid 0
    set pid 0
    set pcolor black
    set cent-util-list-non-para mean cent-util-list-non-para
    set cent-util-list-para mean cent-util-list-para
    set cent-util-non-para (sum [ cent-util-list-non-para ] of neighbors with [ocean = 0]) + cent-util-list-non-para
    set cent-util-para (sum [ cent-util-list-para ] of neighbors with [ocean = 0]) + cent-util-list-para
 ]


  let max-cnp max [cent-util-non-para] of patches
  let min-cnp min [cent-util-non-para] of patches

  let max-cp max [cent-util-para] of patches
  let min-cp min [cent-util-para] of patches

  ;this block is for writing non-para file
  ask patches with [ocean = 0] [
  if (cent-util-non-para >= 0 * max-cnp and cent-util-non-para < .25 * max-cnp and cent-util-non-para > max [ cent-util-non-para ] of neighbors )
    [ set pcolor red set npid 1]
  if (cent-util-non-para >= 0.25 * max-cnp and cent-util-non-para < .5 * max-cnp and cent-util-non-para > max [ cent-util-non-para ] of neighbors )
    [ set pcolor blue set npid 2]
  if (cent-util-non-para >= 0.5 * max-cnp and cent-util-non-para < .75 * max-cnp and cent-util-non-para > max [ cent-util-non-para ] of neighbors )
    [ set pcolor grey set npid 3]
  if (cent-util-non-para >= 0.75 * max-cnp and cent-util-non-para <= 1 * max-cnp and cent-util-non-para > max [ cent-util-non-para ] of neighbors )
    [ set pcolor yellow set npid 4 ]

  ]

  let title word "patch-cids-non-para-" item ((length cent-day-list) - 1) cent-day-list
  set title word title ".txt"

  file-open title;"patch-cids.txt"


  let xc -64 let yc 64 while [ yc >= -64]  [ ask patch xc yc [file-print npid] set xc xc + 1 if xc >= 65 [ set yc yc - 1 set xc -64 ] ]

  file-close-all
  ;this block is for writing non-para file

  ;this block is for writing para file
  if day <= 166 [
  ask patches with [ocean = 0] [
  if (cent-util-para >= 0 * max-cp and cent-util-para < .25 * max-cp and cent-util-para > max [ cent-util-para ] of neighbors )
    [ set pcolor red set pid 5]
  if (cent-util-para >= 0.25 * max-cp and cent-util-para < .5 * max-cp and cent-util-para > max [ cent-util-para ] of neighbors )
    [ set pcolor blue set pid 6]
  if (cent-util-para >= 0.5 * max-cp and cent-util-para < .75 * max-cp and cent-util-para > max [ cent-util-para ] of neighbors )
    [ set pcolor grey set pid 7]
  if (cent-util-para >= 0.75 * max-cp and cent-util-para <= 1 * max-cp and cent-util-para > max [ cent-util-para ] of neighbors )
    [ set pcolor yellow set pid 8 ]

  ]

  set title word "patch-cids-para-" item ((length cent-day-list) - 1) cent-day-list
  set title word title ".txt"

  file-open title;"patch-cids.txt"


  set xc -64 set yc 64 while [ yc >= -64]  [ ask patch xc yc [file-print pid] set xc xc + 1 if xc >= 65 [ set yc yc - 1 set xc -64 ] ]

    file-close-all ]

  ask patches [ set cent-util-list-non-para [ ] set cent-util-list-para [ ] ]

  ;this block is for writing para file
    ;let c-matrix matrix:from-row-list [id] of patches

  ;ask patches with [ cent-util-non-para >= 0 * max-cnp and cent-util-non-para <= .24 * max-cnp] [ if cent-util-non-para > max [ cent-util-non-para ] of neighbors [ set pcolor red ]]
  ;ask patches with [ cent-util-non-para >= .25 * max-cnp and cent-util-non-para <= .49 * max-cnp] [ if cent-util-non-para > max [ cent-util-non-para ] of neighbors [ set pcolor blue ]]
  ;ask patches with [ cent-util-non-para >= .5 * max-cnp and cent-util-non-para <= .74 * max-cnp] [ if cent-util-non-para > max [ cent-util-non-para ] of neighbors [ set pcolor grey ]]
  ;ask patches with [ cent-util-non-para >= .75 * max-cnp and cent-util-non-para <= 1 * max-cnp] [ if cent-util-non-para > max [ cent-util-non-para ] of neighbors [ set pcolor yellow ]]
end

to centroid-read
  if day < 250 [
    let cycler 1
  ;show day
  ;show (day - 12) mod 14
  let tday day + 14
  let target-file word "data/migration-centroids/patch-cids-non-para-" tday
  set target-file word target-file ".txt"
  ;;show target-file
  file-open target-file
  ask patches [ set npid 0 set np-network-id 0 set pcolor black ]
  let xc -64 let yc 64 
    while [ yc >= -64]  
    [ ask patch xc yc 
      [set npid file-read if npid > 0 [ set np-network-id cycler set cycler cycler + 1 ] ] 
       set xc xc + 1 if xc >= 65 [ set yc yc - 1 set xc -64 ] 
    ]
  ;ask patches [if npid = 1 [set pcolor red] if npid = 2 [set pcolor blue] if npid = 3 [set pcolor grey] if npid = 4 [set pcolor yellow] ]
    file-close-all
    

    if day < 166
    [
      set cycler 1
      ;show day
      ;show (day - 12) mod 14
      
      set target-file word "data/migration-centroids/patch-cids-para-" tday
      set target-file word target-file ".txt"
      ;show target-file
      file-open target-file
      ask patches [ set pid 0 set p-network-id 0 set pcolor black ]
      set xc -64 set yc 64 
      while [ yc >= -64]  
      [ ask patch xc yc [set pid file-read if pid > 0 [ set p-network-id cycler set cycler cycler + 1 ] ]
        set xc xc + 1 if xc >= 65 [ set yc yc - 1 set xc -64 ] ]
      
      file-close-all
    ]
    

  ]
  

  if display-centroids? = true [ display-npc ]
end


to display-npc
  ;ask patches [ set pcolor black ]
  ask patches [if npid = 1 [set pcolor red] if npid = 2 [set pcolor blue] if npid = 3 [set pcolor green] if npid = 4 [set pcolor yellow] ]
end

to display-pc
  ask patches [ set pcolor black ]
  ask patches [if pid = 5 [set pcolor red] if pid = 6 [set pcolor blue] if pid = 7 [set pcolor grey] if pid = 8 [set pcolor yellow] ]
end

to select-centroid 
  
  set last-centroid current-centroid
  let grid-target grid current-grid
  let last-color 0
  
  let nonTarget patches with [ member? [patch-id] of self [cent-memory] of myself ]  
  set nonTarget patches with [ any? nonTarget in-radius 2 ] 
  ask nonTarget [ set last-color pcolor set pcolor red] 
  let target patches with [ not any? nonTarget in-radius 0 ]

  let last-np-cent [np-network-id] of last-centroid
  let current-np-cent [np-network-id] of current-centroid
  let np-target-centroids target with [distance grid-target < 16 and npid > 0 and np-network-id != last-np-cent and np-network-id != current-np-cent ] 

  let last-p-cent [p-network-id] of last-centroid
  let current-p-cent [p-network-id] of current-centroid
  let p-target-centroids target with [distance grid-target < 16 and pid > 0 and p-network-id != last-p-cent and p-network-id != current-p-cent]

  let qual-list []
  let patch-list []
  
  ifelse (day > 151 and day < 167) and caribou-class = 2 
  [
    ask p-target-centroids [ 
      let caribou-dist distance myself
      let grid-dist distance grid-target;sqrt(((pxcor - xg) ^ 2) + ((pycor - yg) ^ 2))
      let qual-val pid / (caribou-dist + grid-dist)
      set qual-list lput qual-val qual-list
      if qual-val >= max qual-list
      [ set patch-list lput self patch-list]
      ;set np-cent-prob lput report-np-probs np-cent-prob
    ]
    
    mod-cent-target patch-list
    
    mod-p-network
  ]
  [
    ask np-target-centroids [ 
      ;let avg-util ((sum [ caribou-utility-non-para ] of neighbors) + caribou-utility-non-para ) / 9
      let caribou-dist distance myself
      let grid-dist distance grid-target ;sqrt(((pxcor - xg) ^ 2) + ((pycor - yg) ^ 2))
      let qual-val npid / (caribou-dist + grid-dist)
      set qual-list lput qual-val qual-list
      if qual-val >= max qual-list
      [ set patch-list lput self patch-list]
      ;set np-cent-prob lput report-np-probs np-cent-prob
    ]
    
    mod-cent-target patch-list
    
    mod-np-network
  ]
  
  ask nonTarget [ set pcolor last-color ] 
end

to mod-cent-target [ targets ] ;caribou procedure
  set last-centroid current-centroid
  set cent-memory lput [patch-id] of last-centroid cent-memory
  set cent-memory remove-item 0 cent-memory
  set current-centroid one-of targets
end

to profile-net-setup

  profiler:reset
  profiler:start
  setup-cent-layers
  profiler:stop
  print profiler:report

end

to setup-cent-layers
  let day-list [ 152 166 180 194 208 222 236 250 ]
  
  foreach day-list [
    listItem ->
    set day listItem 
    centroid-read
    if listItem = 152 [
      set np-centroid-layer-152 matrix:make-constant (max [np-network-id] of patches) (max [np-network-id] of patches) 0
      set p-centroid-layer-152 matrix:make-constant (max [p-network-id] of patches) (max [p-network-id] of patches) 0  ] 
    
    if listItem = 166 [ set np-centroid-layer-166 matrix:make-constant (max [np-network-id] of patches) (max [np-network-id] of patches) 0 ]
    if listItem = 180 [ set np-centroid-layer-180 matrix:make-constant (max [np-network-id] of patches) (max [np-network-id] of patches) 0 ] 
    if listItem = 194 [ set np-centroid-layer-194 matrix:make-constant (max [np-network-id] of patches) (max [np-network-id] of patches) 0 ]  
    if listItem = 208 [ set np-centroid-layer-208 matrix:make-constant (max [np-network-id] of patches) (max [np-network-id] of patches) 0 ]
    if listItem = 222 [ set np-centroid-layer-222 matrix:make-constant (max [np-network-id] of patches) (max [np-network-id] of patches) 0 ]
    if listItem = 236 [ set np-centroid-layer-236 matrix:make-constant (max [np-network-id] of patches) (max [np-network-id] of patches) 0 ]
    if listItem = 250 [ set np-centroid-layer-250 matrix:make-constant (max [np-network-id] of patches) (max [np-network-id] of patches) 0 ]
  ]
  
  set day 152
  
end

to swap-centroid-layers
  if day = 152 [
     set np-centroid-network np-centroid-layer-152
     set p-centroid-network p-centroid-layer-152
  ]
  
  if day = 166 [
   set np-centroid-layer-152 np-centroid-network
   set np-centroid-network np-centroid-layer-166
   set p-centroid-layer-152 p-centroid-network 
  ]
  
  if day = 180 [
    set np-centroid-layer-166 np-centroid-network
    set np-centroid-network np-centroid-layer-180
  ]
  
  if day = 194 [
    set np-centroid-layer-180 np-centroid-network
    set np-centroid-network np-centroid-layer-194
  ]
  
  if day = 208 [
    set np-centroid-layer-194 np-centroid-network
    set np-centroid-network np-centroid-layer-208
  ]
  
  if day = 222 [
    set np-centroid-layer-208 np-centroid-network
    set np-centroid-network np-centroid-layer-222
  ]
  
  
  if day = 236 [
    set np-centroid-layer-222 np-centroid-network
    set np-centroid-network np-centroid-layer-236
  ]
  
  if day = 250 [
    set np-centroid-layer-236 np-centroid-network
    set np-centroid-network np-centroid-layer-250
  ]
  
  if day = 258 [
   set np-centroid-layer-250 np-centroid-network 
  ]
end

to setup-network
  let output word "np-master-matrix-" day
  set output word output ".csv"
  file-open output
  set np-centroid-network matrix:make-constant (max [np-network-id] of patches) (max [np-network-id] of patches) 0
  file-write matrix:to-row-list np-centroid-network
  file-close-all
  
  set output word "p-master-matrix-" day
  set output word output ".csv"
  file-open output
  set p-centroid-network matrix:make-constant (max [p-network-id] of patches) (max [p-network-id] of patches) 0
  file-write matrix:to-row-list p-centroid-network
  file-close-all

   print "done!"
end

to mod-np-network
  let row [np-network-id] of last-centroid
  let col [np-network-id] of current-centroid
 ; show row 
 ; show col
 ; show ((matrix:get np-centroid-network row col) + 1) 
  if row != 0 and col != 0 [ ;prevents caribou agents who have 'throw-away' last centroids from modifying the network.
    ifelse (row = col)
    [ print "run-time error in mig-cents, check either centroid assignment or matrix storage method"
      ;inspect self ]
      stop ] 
    [ set np-centroid-network matrix:set-and-report np-centroid-network (row - 1) (col - 1) ((matrix:get np-centroid-network (row - 1) (col - 1) ) + 1) ] ;site of matrix index error
  ]
end

to mod-p-network
    let row [p-network-id] of last-centroid
    let col [p-network-id] of current-centroid
  if row != 0 and col != 0 [  ;prevents caribou agents who have 'throw-away' last centroids from modifying the network.
    ifelse (row = col)
    [ print "run-time error in mig-cents, check either centroid assignment or matrix storage method"
      ;inspect self ]
      stop ]
    [ set p-centroid-network matrix:set-and-report p-centroid-network (row - 1) (col - 1) ((matrix:get p-centroid-network (row - 1) (col - 1) ) + 1) ]
  ]
end


to centroid-export
  ifelse day >= 258
  [ ;for final export.
    let output word "data/centroid-exports/np-master-matrix-" 250
    set output word output "-"
    set output word output year
    set output word output ".csv"
    file-open output
    file-print matrix:to-row-list np-centroid-network
    file-close-all 
    ;print "the final centroid weighting successfully exported."
  ]
  [
    if (day - 12) mod 14 = 0 and day > 152
    [
      
      ;export 
      
      let output word "data/centroid-exports/np-master-matrix-" (day - 14)
      set output word output "-"
      set output word output year
      set output word output ".csv"
      file-open output
      file-print matrix:to-row-list np-centroid-network
      file-close-all 
      
      if day <= 166 ;export para weights.
        [
          set output word "data/centroid-exports/p-master-matrix-" (day - 14)
          set output word output "-"
          set output word output year
          set output word output ".csv"
          file-open output
          file-print matrix:to-row-list p-centroid-network
          file-close-all
        ]
      
    ]
  ]
end

to display-weighting
  if any? centroids [ask centroids [die]]
  if any? cent-links [ask cent-links [die]]
  ask patches with [np-network-id > 0]
  [
    sprout-centroids 1
    [
      set cid np-network-id
      set color pcolor
    ]
  ]
  
  print "stop check 1"
  
  let x 1
  let num-rows item 0 matrix:dimensions np-centroid-network 
  
  while [x <= num-rows]
  [
    
    let cent-list matrix:get-row np-centroid-network (x - 1) ;x represents last centroid row
    
    if sum cent-list > 0
    [
      let y 1
      while [ y <= length cent-list ] ;y represents current centroid col
      [
        if item (y - 1) cent-list > 0
        [
          ask centroids with [ cid = x ] 
          [ 
            carefully 
            [ create-cent-links-to centroids with [ cid = y ] [ set link-weight item (y - 1) cent-list set thickness 0.6 set color grey ] ]
            [ set size 4 set color red ]
          ]
        ]
        set y y + 1
      ]
    ]
    set x x + 1
  ]
  
  print "stop check 2"
  
end

