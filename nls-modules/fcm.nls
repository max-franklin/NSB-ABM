to-report fcm-index-max [mat]
  let i 0
  let max-index 0
  let max-num 0
  while [i < 5]
  [
    if (matrix:get mat i 0 >= max-num)
    [
      set max-num matrix:get mat i 0
      set max-index i
    ]

    set i (i + 1)
  ]
 ; show (max-index)
  report (max-index)
end

to-report fcm-ternary [mind maxd currd]
  if (currd < mind)
  [
    report 0
  ]

  if (currd > maxd)
  [
    report 1
  ] 

  report (currd - mind) / (maxd - mind)
end

to-report fcm-sigmoid-additional [scale initial altered]

  report ( 1 / (1 + e ^ (-1 * scale * (altered - initial))))
end

; WARNING: The Q-Net for Caribou is also dependent on this function, if this sigmoid function is altered, the Q-Net needs to
;             be updated to use the standard format: (1 / (1 + e ^ (-1 * rawVal))) for its mapping
to-report fcm-sigmoid-simple [rawVal]
  report (1 / (1 + e ^ (-1 * rawVal)))
end

to caribou-random-fcm
  ;different procedures are for the type of random FCM that is desired (binary, pentavalent logic, fuzzy logic).
  ;set fcm-adja-base matrix:map random-fcm fcm-adja-base ;randomize fcm
  ;set fcm-adja-base matrix:map random-fcm-binary fcm-adja-base ;randomize fcm
  ;set fcm-adja-base matrix:map random-fcm-pentav fcm-adja-base ;randomize fcm
  set fcm-adja-base matrix:map random-fcm-fuzzy fcm-adja-base ;randomize fcm
end

to-report test-diff [diff]
  ;let test matrix:minus ([fcm-adja] of one-of caribou) fcm-adja-base
  
  ;let test matrix:to-row-list fcm-adja-base
  set diff matrix:to-row-list diff
  let x 0
  let sum-vals 0
  while [ x + 1 <= length diff ]
  [
   set diff replace-item x diff (map abs (item x diff))
   set sum-vals sum-vals + sum (item x diff)
    
   set x x + 1 
  ]
  let out "num diffs: "
  set out word out sum-vals
  ;print out

  report sum-vals
end

to-report build-fcm-data [ fcm-adja-list agent-type ]
  ;;agent-type = 0 = caribou
  ;;agent-type = 1 = hunter
  
  let fcm-var-out [ ]
  
  let fcm-agentnum-list [ ]
  let fcm-success-list [ ]

  let x 0
  let y (x + 1)
  
  let test? false
  
  ifelse agent-type = 0
  [
    while [x < length fcm-adja-list]
    [
      let counter 1
      let current-fcm item x fcm-adja-list
      ;set counter-list lput 1 counter-list
      let avg-success mean [ bioenergy-success ] of caribou with [ fcm-adja = current-fcm ]
      
      if test? [ print avg-success ]
      
      let compStateMem [ 0 0 0 0 0 ]
      
      ask caribou with [ fcm-adja = current-fcm ] [
        ;set compStateMem lput state-memory compStateMem
        set compStateMem (map + compStateMem state-memory)
      ]
      
      ;;now find amount of time spent in foraging states.
      let fgTime 100 * ((item 1 compStateMem + item 4 compStateMem) / (sum compStateMem))
      
      ;;calculate state fitness based on amount of time spent foraging.
      let lowFg 50
      let highFg 88
      let stateFit 0
      
      ifelse fgTime <= highFg and fgTime >= lowFg
        [ set stateFit 1 ]
        [
          ifelse fgTime > highFg
          [
            let diff 100 - fgTime
            set stateFit diff / (100 - highFg)
          ]
          [ set stateFit fgTime / lowFg ] 
        ]
      
      if avg-success >= 0 [ set avg-success avg-success * stateFit ]
      
      if test? [ print compStateMem print fgTime print stateFit print avg-success ]
      
      
      set test? false
      
      set y x + 1
      
      if y >= length fcm-adja-list
      [ set fcm-agentnum-list lput counter fcm-agentnum-list
        set fcm-success-list lput avg-success fcm-success-list ]
      
      while [y < length fcm-adja-list]
      [
        let comp matrix:minus current-fcm (item y fcm-adja-list)
        
        ifelse test-diff comp = 0
        [
          set counter counter + 1
          set fcm-adja-list remove-item y fcm-adja-list
          ;set counter-list replace-item x counter-list (item x counter-list + 1)
        ]
        [
          set y y + 1
        ]
        
        if (y + 1) > length fcm-adja-list
        [ set fcm-agentnum-list lput counter fcm-agentnum-list
          set fcm-success-list lput avg-success fcm-success-list ] 
        
      ]
      
      set x x + 1
    ]
    set caribou-fcm-adja-list fcm-adja-list
    set caribou-fcm-agentnum-list fcm-agentnum-list
    set caribou-fcm-success-list fcm-success-list
  ]
  [
    while [x < length fcm-adja-list]
    [
      let counter 1
      let current-fcm item x fcm-adja-list
      ;set counter-list lput 1 counter-list
      let avg-success mean [ harvest-amount ] of hunters with [ fcm-adja = current-fcm ]
      
      if test? [ print avg-success ]
      
      set test? false
      
      set y x + 1
      
      if y >= length fcm-adja-list 
      [ set fcm-agentnum-list lput counter fcm-agentnum-list
        set fcm-success-list lput avg-success fcm-success-list ]
      
      while [y < length fcm-adja-list]
      [
        let comp matrix:minus current-fcm (item y fcm-adja-list)
        
        ifelse test-diff comp = 0
        [
          set counter counter + 1
          set fcm-adja-list remove-item y fcm-adja-list
          ;set counter-list replace-item x counter-list (item x counter-list + 1)
        ]
        [
          set y y + 1
        ]
        
        if (y + 1) > length fcm-adja-list
        [ set fcm-agentnum-list lput counter fcm-agentnum-list
          set fcm-success-list lput avg-success fcm-success-list ] 
        
      ]
      
      set x x + 1
    ]
  ]
  
  
  
  
  let min-s min fcm-success-list
  let max-s max fcm-success-list 


  ifelse agent-type = 0
  [
    ;carefully 
    ;[ set fcm-success-list map [ i -> (i - min-bio)/(max-bio - min-bio) ]  fcm-success-list ]
    ;[ set fcm-success-list map [ i -> 1 ] fcm-success-list ]
    ;set fcm-agentnum-list map [ i -> i / (count caribou)]  fcm-agentnum-list
    carefully
    [ set fcm-success-list feature-scale-list min-s max-s fcm-success-list ]
    [ set fcm-success-list map [ 1 ] fcm-success-list ]
    set fcm-agentnum-list map [ ? / (count caribou)]  fcm-agentnum-list
  ]
  [
    ;carefully 
    ;[ set fcm-success-list map [ i -> (i - min-bio)/(max-bio - min-bio) ]  fcm-success-list ]
    ;[ set fcm-success-list map [ i -> 1 ] fcm-success-list ]
    ;set fcm-agentnum-list map [ i -> i / (count caribou)]  fcm-agentnum-list
    carefully
    [ set fcm-success-list feature-scale-list min-s max-s fcm-success-list ]
    [ set fcm-success-list map [ 1 ] fcm-success-list ]
    ;set fcm-agentnum-list map [ ? / (count caribou)]  fcm-agentnum-list
    set fcm-agentnum-list map [ ? / (count hunters)]  fcm-agentnum-list
    
  ]
  
  let weighted-list (map * fcm-success-list fcm-agentnum-list)
  
  let prob-list build-prob-list weighted-list 
  
  set fcm-var-out list weighted-list prob-list
  
  report fcm-var-out
end


to select-fcms
  ;procedure for selecting an FCM for all caribou to use.
  ;FCM is selected randomly from the weights of caribou bioenergy success. 
  
  ;build-fcm-data
  
  let min-s min caribou-fcm-success-list
  let max-s max caribou-fcm-success-list 

  ;carefully 
  ;[ set caribou-fcm-success-list map [ i -> (i - min-bio)/(max-bio - min-bio) ]  caribou-fcm-success-list ]
  ;[ set caribou-fcm-success-list map [ i -> 1 ] caribou-fcm-success-list ]
  ;set caribou-fcm-agentnum-list map [ i -> i / (count caribou)]  caribou-fcm-agentnum-list
  carefully
  [ set caribou-fcm-success-list feature-scale-list min-s max-s caribou-fcm-success-list ]
  [ set caribou-fcm-success-list map [ 1 ] caribou-fcm-success-list ]
  set caribou-fcm-agentnum-list map [ ? / (count caribou)]  caribou-fcm-agentnum-list
  
  let weighted-list (map * caribou-fcm-success-list caribou-fcm-agentnum-list)
  
  ;show weighted-list
  
  ;let x 0
  ;let y (x + 1)
  ;let prob-num 0
  ;;let mini-list [ ]
  ;let prob-list [ ]
  
  ;while [x < length weighted-list ]
  ;[
  ;  set prob-num 0
    ;set mini-list 
    ;set prob-num sum 
  ;  while [y <= x ]
  ;  [
  ;    set prob-num prob-num + item y weighted-list
  ;    set y y + 1
  ;  ]
    
  ;  set prob-list lput prob-num prob-list
  ;  set x x + 1
  ;]
  
    
  ;let minVal min prob-list
  ;let maxVal max prob-list
  ;set prob-list feature-scale-list minVal maxVal prob-list
  
  let prob-list build-prob-list weighted-list
  
  ask caribou
  [
   ;print word "previous fcm: " fcm-adja
    ifelse caribou-recombine?
    [ 
      let genome-1 select-weighted-val prob-list caribou-fcm-adja-list
      let genome-2 select-weighted-val prob-list caribou-fcm-adja-list
      ;print word "new fcm: " fcm-adja
      set fcm-adja cross-genome genome-1 genome-2 caribou-recomb-prob
    ]
    [
      set fcm-adja select-weighted-val prob-list caribou-fcm-adja-list
    ]
   
   if caribou-mutate? [ mutate-genome caribou-mutate-prob ]

  ]
  
  
end

to-report select-genome [ prob-list genome-list ]
  let random-prob (1 + random 1000) / 1000
  let diff-list map [ abs(? - random-prob) ] prob-list
  let pos position (min diff-list) diff-list
  
  ifelse random-prob >= item pos prob-list
  ;carefully is for in-case max probability = random-prob, causing caribou to search 1 farther than the list.
    [ carefully 
      [report item (pos + 1) caribou-fcm-adja-list]
      [report item (pos) caribou-fcm-adja-list] ] 
    [ report item (pos) caribou-fcm-adja-list ]
end

to-report cross-genome [ genome-1 genome-2 recomb-prob ]
  let recomb-genome []
  ;let recomb-chance 0.5
  let rand-roll random-float 1
  ifelse rand-roll < recomb-prob
  [
    let rand-row random item 0 matrix:dimensions genome-1
    let rand-col random item 1 matrix:dimensions genome-1
    set genome-1 matrix:to-row-list genome-1
    set genome-2 matrix:to-row-list genome-2
    
    
    let snip1 sublist genome-1 0 rand-row
    ;show length snip1
    let snip2 sublist genome-2 (rand-row + 1) (item 0 matrix:dimensions fcm-adja-base) ;21
    ;show length snip2
    
    let subsnip1 sublist (item rand-row genome-1) 0 rand-col
    let subsnip2 sublist (item rand-row genome-2) rand-col (item 1 matrix:dimensions fcm-adja-base) ;11
    
    let fused-snip subsnip1
    
    foreach subsnip2 [ set fused-snip lput ? fused-snip ]

    set snip1 lput fused-snip snip1
    
    foreach snip2 [ set snip1 lput ? snip1 ]
    
    set recomb-genome matrix:from-row-list snip1

    ;show rand-row
    ;show rand-col
    
    ;show subsnip1
    ;show subsnip2
    ;show fused-snip

    report recomb-genome
  ]
  [ report genome-1 ]
end

to-report feature-scale-list [minVal maxVal x]
  set x map [(? - minVal) / (maxVal - minVal)] x
  report x
end

to test-prob
  let x 0
  let y 0
  let weighted-list [ 0.25 0.15 0.5 ]
  let prob-num 0
  let prob-list [ ]
   while [x < length weighted-list ]
  [
    set y 0
    set prob-num 0
    ;set mini-list 
    ;set prob-num sum 
    while [y <= x ]
    [
      set prob-num prob-num + item y weighted-list
      set y y + 1
    ]
    
    set prob-list lput prob-num prob-list
    set x x + 1
  ]
  
  show prob-list
end


;Breed Updates for FCMs
to update-caribou-fcm
  
  set caribou-fcm-adja-list [fcm-adja] of caribou
  
  set caribou-fcm-agentnum-list [ ]

  set caribou-fcm-success-list [ ]
  
  let fcm-var-out (build-fcm-data caribou-fcm-adja-list 0)
  
  let weighted-list item 0 fcm-var-out
  let prob-list item 1 fcm-var-out
  
  ask caribou
    [
      
      ;print word "previous fcm: " fcm-adja
      ifelse caribou-recombine?
      [ 
        let genome-1 select-weighted-val prob-list caribou-fcm-adja-list
        let genome-2 select-weighted-val prob-list caribou-fcm-adja-list
        ;print word "new fcm: " fcm-adja
        set fcm-adja cross-genome genome-1 genome-2 caribou-recomb-prob
      ]
      [
        set fcm-adja select-weighted-val prob-list caribou-fcm-adja-list
      ]
      
      if caribou-mutate? [ mutate-genome caribou-mutate-prob ]
      ;set fcm-adja matrix:copy fcm-adja-base ; Adj
      ;removing this procedure for the time being.
      ;set fcm-adja matrix:map mutate-nonzero fcm-adja ;mutate the map
      ;mutate-genome
      
      set state-memory []
      repeat 5 [ set state-memory lput 0 state-memory ]
      let caribou-group-number floor(caribou-amt / caribou-group-amt)
      set bioenergy-success (27.5 * 1000)
      set bioenergy (27.5 * 1000); caribou-group-number * 1000) ; In kJ ;reset energy
                                 ;      set cog-map matrix:copy base-fcm-caribou
                                 ;
                                 ;      let rand (random-float (mutate-amt * 2) - mutate-amt)
                                 ;      matrix:set cog-map 0 3 ((matrix:get cog-map 0 3) + rand)
                                 ;
                                 ;      set rand (random-float (mutate-amt * 2) - mutate-amt)
                                 ;      matrix:set cog-map 0 4 ((matrix:get cog-map 0 4) + rand)
                                 ;
                                 ;      set rand (random-float (mutate-amt * 2) - mutate-amt)
                                 ;      matrix:set cog-map 1 3 ((matrix:get cog-map 1 3) + rand)
                                 ;
                                 ;      set rand (random-float (mutate-amt * 2) - mutate-amt)
                                 ;      matrix:set cog-map 1 4 ((matrix:get cog-map 1 4) + rand)
                                 ;
                                 ;      set rand (random-float (mutate-amt * 2) - mutate-amt)
                                 ;      matrix:set cog-map 2 4 ((matrix:get cog-map 2 4) + rand)
                                 ;
                                 ;      set rand (random-float (mutate-amt * 2) - mutate-amt)
                                 ;      matrix:set cog-map 2 5 ((matrix:get cog-map 2 5) + rand)
                                 ;
                                 ;      set rand (random-float (mutate-amt * 2) - mutate-amt)
                                 ;      matrix:set cog-map 2 6 ((matrix:get cog-map 2 6) + rand)
                                 ;
                                 ;      set rand (random-float (mutate-amt * 2) - mutate-amt)
                                 ;      matrix:set cog-map 3 6 ((matrix:get cog-map 3 6) + rand)
                                 ;
                                 ;setxy -12 -27
      
      let rxcor random-xcor
      let rycor random-ycor
      
      while[rxcor < -63 or rxcor > 63]
      [
        set rxcor random-xcor
      ]
      
      while[rycor < -63 or rycor > 63]
      [
        set rycor random-ycor
      ]
      
      set current-centroid one-of centroids
      
      set centroid-attraction set-centroid-attraction
      
      while [not check-location rxcor rycor]
      [
        set rxcor random-xcor
        set rycor random-ycor
      ]
      setxy rxcor rycor
    ]
  
  
  ;]
end


to mutate-genome [ mutate-prob ] 
  
  ;let point-mut-prob 0.05 ;probability of the genome undergoing a point mutation.
  let random-roll (1 + random 100) / 100
  if random-roll < mutate-prob
  [
    ;find a random location in the genome to mutate.
    ;first, select a random row.
    let ran-row random (item 0 (matrix:dimensions fcm-adja))
    ;now select a random column
    let ran-col random (item 1 (matrix:dimensions fcm-adja))
    
    set fcm-adja matrix:set-and-report fcm-adja ran-row ran-col mut-val 
  ]

end
  
to-report mut-val
  if mutation-method = "fuzzy-logic" [ let rand (-1 + ((1 + random 2000) / 1000 ) ) report rand ] ;fuzzy logic system 
  if mutation-method = "trivalent" [ let rand (- 1 + random 3) report rand ];trivalent system 
  if mutation-method = "pentavalent" [
    let rand 0
    let roll random 2
    ifelse roll = 0
      [ set rand (- 1 + random 3) ]
      [ set rand ((- 1 + random 3) / 2) ]
    report rand ;pentavalent system
  ]
end

to-report random-fcm [x]
  report (random-float 10) - 5
end

to-report random-fcm-binary [x]
  report (-1 + random 3)
end

to-report random-fcm-pentav [x]
  let rand random 2
  ifelse rand = 0
  [ report (-1 + random 3) ]
  [ report ((-1 + random 3) / 2) ]
end

to-report random-fcm-fuzzy [x]
  report (-1 + ((1 + random 2000) / 1000 ) )
end

to export-fcm
  let file-ex word "FCM-List:" date-and-time
  set file-ex word file-ex ".txt"
  file-open file-ex
  file-write matrix:to-row-list base-fcm-caribou
  file-write "\n"
  file-close
end
