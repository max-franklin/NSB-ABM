;Main code for the ABM

;Zip file w/ model and data:
;https://drive.google.com/a/alaska.edu/file/d/0B6Qg-B9DYEuKVE5EQldZMjUtRlE/view?usp=sharing


extensions [ gis array matrix table csv]

<<<<<<< HEAD
__includes["insect.nls" "precip.nls" "NDVI.nls" "caribouPop.nls"
           "elevation.nls" vegetation-rank.nls" "moosePop.nls" "hunters.nls"]
=======
__includes["insect.nls" "precip.nls" "NDVI.nls" "caribouPop.nls" "caribou.nls" "moose.nls" "fcm.nls" "patch-list.nls" "utilityfunctions.nls" "display.nls"]
>>>>>>> 0553129626622db92bcbdba8202a5db4a415eb07

breed [moose a-moose]
breed [caribou a-caribou]
breed [cisco a-cisco]
breed [char a-char]
breed [whitefish a-whitefish]
breed [centroids centroid]
breed [deflectors deflector]
breed [mem-markers mem-mark]
<<<<<<< HEAD
breed [ hunters hunter ]

=======
breed [hunters hunter]
>>>>>>> 0553129626622db92bcbdba8202a5db4a415eb07

globals
[

;GIS DATA
  patch-roughness-dataset
  patch-wetness-dataset
  patch-streams-dataset
  patch-elevation-dataset
  patch-ocean-dataset

  ;globals for the NDVI.nls module.
  ndvi-dataset
  vegetation-ndvi-list
  ;ndvi-matrix
  ndvi-max

  patch-vegetation-dataset
  max-roughness

  ;use boxes;
  ; mutation-rate
  ; mutation-amt
  ; learn-rate

  ;Globals Precipitation
  precipitation-dataset
	precipitation-data-list
 	precipitation-max
 precipitation-matrix-number

  ;;Bounds Data
  boundsTestData

  current-season


  adjacency-matrix

  ;Time Info
  year
  day
  hour
  ;;FCM
  base-fcm-caribou
  best-caribou-val
  fcm-adja-base


  ;PatchList for movement decisions
  patch-coord-x
  patch-coord-y
  patch-list-exists
  patch-list-utility
  patch-array-iterator
  ;;WORK AROUND NUMBERS;; These numbers are used to work around limitations with the
  ;    NetLogo language

  caribou-pop
  caribou/agent
  r-caribou
  ;;Caribou Activation Control
  ;caribou-cent-dist-cutoff
  ;caribou-util-cutoff

  ;;magic centroid number - A hack to allow comparison with centriod number
  magic-centroid



  ;;;;; HENRI'S GLOBALS ;;;;;
  mosquito-sigma
  oestrid-sigma
  mosquito-means-list
  oestrid-means-list
  mosquito-max-color
  oestrid-max-color
  mosquito-max-tenth-color
  oestrid-max-tenth-color
  mosquito-max
  oestrid-max
  mosquito-max-tenth
  oestrid-max-tenth
  mosquito-mean
  oestrid-mean
  time-of-year
  vegetation-CP-list
  vegetation-CNP-list
  vegetation-PC-list
  vegetation-MH-list
  vegetation-ML-list
  vegetation-OH-list
  vegetation-OL-list
  vegetation-LS-list
  kde-elevation-dataset
  kde-insect-dataset
  kde-NDVI-dataset
  kde-precipitation-dataset
  kde-vegrank-dataset
  elev-max-k
  elev-min-k
  insect-max-k
  insect-min-k
  ndvi-max-k
  ndvi-min-k
  prec-max-k
  prec-min-k
  vegrank-max-k
  vegrank-min-k

  ;;;; insect modifier
  insect-needs-reset
]

patches-own
[
  wetness
  streams
  ocean
  roughness
  elevation
  boundsTest
  vegetation-type
  ndvi-quality

  ;Patches Precipitation.nls
  precipitation-amt
  prec-paint


  ;;Utility Values
  ;caribou
  caribou-utility-max
  caribou-utility
  caribou-modifier ;modified based on caribou vists. Add decay?

  ;moose
  moose-utility-max
  moose-utility
  ;all
  deflection

  ;;;;; HENRI PATCH VALUES ;;;;;
  prev-insect-val
  mosquito-density
  oestrid-density
  mosquito-scale
  oestrid-scale
  gray-scale
  vegetation-beta
  elev-paint
  elevation-scale
  kde-elevation-estimate
  kde-insect-estimate
  kde-NDVI-estimate
  kde-precipitation-estimate
  kde-vegrank-estimate
  ;water ;doesn't appear to be used atm, but playing it safe. (Max)
  coast
  ;needed?
  ;bool-ocean
]

centroids-own
[
  avg-insect
  veg-quality
  radius
  cid
  category

]

deflectors-own
[
 ;boolean
 has-applied
 ;patch size
 area-outer
 area-inner
 ;value -- value should be from (0,1]
 deflect-amt
]

turtles-own
[
  hidden-label
]

moose-own
[
  energy
  fd-amt
]

caribou-own
[
  group-size
  radius
  energy
  weight
  fd-amt

  ;;Movement Values in relation to Semeniuk et al
  ;;  differs by being 3x as long compared to Semeniuk. Currently 90 minutes instead of 30 minutes
  ;forage intra-patch
  fga-amt
  ;forage inter-patch
  fge-amt
  ;migrate/taxi
  mg-amt-min
  mg-amt-max
  last-winner-caribou-val
  ;goal patch for foraging
  goal-patch
  goal-reached

  ;FCM
  cog-map
  ;actVals
  util-low
  util-high
  taxi-state
  forage-state
  cent-dist-close
  cent-dist-far
  

  ;--New FCM--
  ;FCM Control
  close-range ;  ex: 1.2
  far-range ; ex: 1.8
  fcm-sigmoid-scalar ; currently always set to 1
  
  bioenergy-upper ;The upper limit for the FCM ternary calculation for energy
  bioenergy-lower ;The lower limit for the FCM Ternary calculation for energy
  ;--FCM Sensors--
  ;0; foe-close
  ;1; foe-far
  ;2; food-close ;neighbor cells?
  ;3; food-far
  ;4; energy-low
  ;5; energy-high
  ;6; food-quantity-low ;lichen content?
  ;7; food-quantity-high
  ;;;----Sensors not in  R. Gras et al.---
  ;8; disturb-close
  ;9; disturb-far

  fcm-mat-sensor ;sensor values placed into a matrix representing the previous values
  fcm-mat-conc-delta ; the stored values for concepts and motor states 1 x 11 (top 6 represent concepts, trailing 5 represent motor states)
  fcm-adja ; Adjacency list for all actions, sub-list taken for matrix operations

  last-taxi-vals
  last-taxi-index

  last-forage-vals
  last-forage-index

  migrate-limit

  bioenergy

  caribou-cognitive

  ;;Current Centroid
  current-centroid
  ;;CurrentState 0 = foraging 1= migration/taxi
  state
  ;;Last Centroid where the caribou came from
  last-centroid


  centroid-attraction
 ; centroid-attraction-min
 ; centroid-attraction-max
  ;used to determine whether a migration has ended // Boolean
  last-state-migrate
  ;Allows remembering of last visited patches // Boolean
  allowed-to-remember
  ;counter for remembering
  attraction-factor

  last-patch-index
  last-patches
  previous-patch

  test-migration
]

mem-markers-own
[
  caribou-id
]

hunters-own [
             ;concepts
             prey-close      ;from 0:3/5 of hunter vision, activator of hunting
             prey-far        ;from 2/5:5/5 of hunter vision, activator of exploring
             stalking        ;level of internal concept
             curiousity      ;level of internal concept
             hunt            ;hunting function
             explore         ;exploring function
             ;FCM
             hunter-fcm-matrix
             hunter-fcm-internal
             hunter-fcm-motor
             hunter-fcm-sensory
             hunter-fcm-raw-internal
             hunter-fcm-act-internal
             ;data
             prey
             distance-to-prey
	     hunter-energy
             home-patch
             catch-probability
             prey-caught
             sensory-close
             sensory-far
            ]

;wraps to other setup functions
to setup
  clear-all
  set time-of-year 0
  set max-roughness 442.442
  set hour 0
  set day 0
  set year 0
  setup-deflectors
  ;this must be called to apply first deflector values
  go-deflectors

  set-mosquito-means-list
  set-oestrid-means-list
  set-mosquito-mean
  set-oestrid-mean
  set-coastline
  
  setup-hunters-temp
  setup-precipitation
  setup-terrain-layers
  setup-caribou-utility
  setup-moose-utility
  setup-moose
  setup-centroids
  setup-caribou
  setup-patch-list
  setup-insect
  set-precipitation-data-list
  reset-ticks
end

to setup-hunters-temp
create-hunters 1
[
  setxy 5 5 
]


end

to setup-centroids
  let data 0
  let arrdata 0
  file-open "data/AllCentroids.csv"
  let idCounter 0

  while [not file-at-end?]
  [
    set data csv:from-row file-read-line
    set arrdata array:from-list data

    create-centroids 1
    [
      set cid idCounter
      setxy (array:item arrdata 0) (array:item arrdata 1)
      set category (array:item arrdata 2)
    ]
    show idCounter
    set idCounter (idCounter + 1)
  ]

  file-close



end


to setup-deflectors
  ;create test deflector.
  create-deflectors 1
  [
    setxy 0 0
    set area-outer 15
    set area-inner 152
    set deflect-amt 1
    set has-applied false
  ]


end

;Go, wraps to other go's
to go
 ; set day (ticks mod 365)
  set hour hour + 1.5
  if(hour = 24)
  [
    set hour 0
    set day (day + 1)
    go-ndvi
    if(day > 365)
    [
      if caribouPopMod? = true
      [ go-caribou-pop ]
      set year year + 1
      set day (day mod 365)
    ]
  ]

  go-deflectors
  go-insect
  go-moose
  go-caribou
  go-precipitation
  update-caribou-utility
  update-moose-utility
  go-dynamic-display

  if(is-training? and day = 365)
  [
    update-caribou-fcm
    export-fcm
  ]


  tick
end



;Apply deflectors, bug with updating adding wrong values
to go-deflectors
  ask deflectors
  [
    if(has-applied = false)
    [
      let steps (area-outer - area-inner)
      let adjust-deflect-amt (deflect-amt / steps)

      let step-count area-outer

      while [step-count > area-inner]
      [
        ask patches in-radius step-count
        [
          set deflection (deflection + adjust-deflect-amt)
        ]

        set step-count (step-count - 1)
      ]

      set has-applied true
    ]
  ]
end


;update caribou/moose display
to go-dynamic-display
  if (show-caribou-utility?)
  [
    display-caribou-utility
  ]

  if (show-moose-utility?)
  [
    display-moose-utility
  ]
end




to setup-terrain-layers

  ;set ndvi-matrix 0 ;initializing to May 1 NDVI layer. Shouldnt be used ofc until May 1 is reached in the model, though..
                    ;need to implement timing for NDVI layer switching. Day 121 = May 1 in the simulation, and day 263 = Oct. 20
                    ;(day 1 = Jan. 1)
  ask patches [ set ndvi-quality 0 ]
  set-ndvi-data-list ;setting up the NDVI list
  if day >= 121 [ go-ndvi ]
  set patch-wetness-dataset gis:load-dataset "data/patches/PatchWetness.asc"
  set patch-streams-dataset gis:load-dataset "data/patches/PatchStreams.asc"
  set patch-elevation-dataset gis:load-dataset "data/patches/PatchElevation.asc"
  set patch-ocean-dataset gis:load-dataset "data/patches/PatchOcean.asc"
  set patch-roughness-dataset gis:load-dataset "data/patches/PatchRoughness.asc"
  set patch-vegetation-dataset gis:load-dataset "data/patches/NorthSlopeVegetation.asc"

  gis:set-world-envelope (gis:envelope-union-of (gis:envelope-of patch-wetness-dataset))

  gis:apply-raster patch-wetness-dataset wetness
  gis:apply-raster patch-roughness-dataset roughness
  gis:apply-raster patch-streams-dataset streams
  gis:apply-raster patch-elevation-dataset elevation
  gis:apply-raster patch-ocean-dataset ocean
  gis:apply-raster patch-vegetation-dataset vegetation-type
  correct-vegetation
end



to-report caribou-veg-type-energy [val]

;1 - Dry prostrate-shrub tundra; barrens
;2 - Moist graminoid, prostrate-shrub tundra (moist, non-acidic tundra)
;3 - Moist dwarf-shrub, tussock graminoid tundra (typical acidic, tussock tundra)
;4 - Moist low-shrub tundra; other shrublands
;5 - Wet graminoid tundra
;6 -  Water
;7 - Clouds, ice
;8 - Shadow
;9 - Moist tussock graminoid, dwarf-shrub tundra (moist, cold, acidic, sandy tussock tundra)

  ;values in MJ in patc
  if(val = 1)
  [
    report 0
  ]
  if(val = 2)
  [
    report 0.15 * 48.77 ;(2195m our patch / 45m Semeniuk patch)
  ]
  if(val = 3)
  [
    report 0.15 * 48.77 ;(2195m our patch / 45m Semeniuk patch)
  ]
  if(val = 4)
  [
    report 0.15 * 48.77 ;(2195m our patch / 45m Semeniuk patch)
  ]
  if(val = 5)
  [
    report 0.58 * 48.77 ;(2195m our patch / 45m Semeniuk patch)
  ]
  if(val = 9)
  [
    report 0.365 * 48.77 ;(2195m our patch / 45m Semeniuk patch) average of wetland/shrub
  ]

  ;other patch type
  report 0


end


;;Correction Functions
to correct-vegetation
  ;Removes clouds and cloud shadows
  ask patches
[
  while [(vegetation-type = 7) or (vegetation-type = 8)]
  [

    let rand random 3
    let tempx (rand - 1)
    set rand random 3
    let tempy (rand - 1)
;    show "x"
;    show tempx + pxcor
;    show "y"
;    show tempy + pycor

    if(tempx + pxcor <= 64) and (tempx + pxcor > -65) and (tempy + pycor <= 64) and (tempy + pycor > -65)
    [
      let veg-temp ([vegetation-type] of patch-at tempx tempy)
      if (not(veg-temp = 7) and not(veg-temp = 8))
      [
        set vegetation-type veg-temp
      ]
    ]

  ]
]
end
;Converts NAD27 Coordinates to Patches in the model
to nad-to-patch-pos [x y]
  ;extents of the data used
  let hmin 2099760
  let hmax 2382960
  let wmin -27000
  let wmax 256200

  ;Output of the previous to ensure extents are correct.
  show "NAD83 Height Min and Max"
  show hmin
  show hmax
  show "NAD83 Width Min and Max"
  show wmin
  show wmax

  ;how many nad coordinates per patch height and width
  let nad-per-x (wmax - wmin) / (max-pxcor - min-pxcor)
  let nad-per-y (hmax - hmin) / (max-pycor - min-pycor)

  ;distance of x from the minimum width. Divide by nad-per-x (nad units per x patches) and divide the total by two and subtract
  ;  assumes origin is center.
  let patch-x ((x - wmin) / nad-per-x) - ((max-pxcor - min-pxcor) / 2)
  let patch-y ((y - hmin) / nad-per-y) - ((max-pycor - min-pycor) / 2)
  show "RESULT X Y"
  show patch-x
  show patch-y

end

;

;Spawn location checking for better testing.
to-report check-location [x y]
  let ocean-good true
  let wetness-good true
  let elevation-good true

  if x < -64.5 or x > 64.5
  [
    report false
 ;   show "X: "
 ;   show x
  ]

  if y < -64.5 or y > 64.5
  [
    report false
 ;   show "Y: "
;    show y
  ]


  ifelse ([ocean] of patch x y) = 1
 [
   set ocean-good  false
  ; show "ocean false"
 ;  show x
 ;  show y
 ]

  [
    set ocean-good true
  ]

  ifelse ([wetness] of patch x y) > 0.95
  [
    set wetness-good false
 ;   show "wet-false"
 ;   show x
  ;  show y
  ]
  [
    set wetness-good true
  ]

   ifelse ([elevation] of patch x y) > elevation-limit
 [
   set elevation-good  false
;   show "elev-false"
 ]

  [
    set elevation-good true
  ]

   ifelse wetness-good = true and ocean-good = true and elevation-good = true
   [
     report true
   ]
   [
     report false
   ]
end

to-report patch-exists [x y]
  if (x > 64 or x < -64)
  [
    report false
  ]

  if (y > 64 or y < 64)
  [
    report false
  ]

  report true
end



;SET COASTLINE
to set-coastline
  ask patches
  [
     if ocean = 0
     [
        if any? neighbors with [ocean = 1]
        [
           set coast true
        ]
     ]
  ]
end

;SHOW COASTLINE
to show-coastline
   ask patches with [coast = true]
   [
      set pcolor 86
   ]
end

;SET MOSQUITO SCALE
to set-mosquito-scale ;determines the gray scale value for mosquito densities
  let c 0
  while [ c < 10 ]
  [
    if (mosquito-density >= (c * mosquito-max-tenth-color)) and (mosquito-density < ((c + 1) * mosquito-max-tenth-color))
    [ set mosquito-scale (c * 0.5) ]
    set c c + 1
  ]
end

;SET GRAY SCALE
to set-gray-scale ;sets the gray scale values based on the desities present at each patch
   set-mosquito-scale
   set-oestrid-scale
   set gray-scale (mosquito-scale + oestrid-scale)
   set pcolor gray-scale
end

;SET OESTRID SCALE
to set-oestrid-scale ;determines the gray scale value for fly densities
  let k 0
  while [ k < 10 ]
  [
    if (oestrid-density >= (k * mosquito-max-tenth)) and (oestrid-density < ((k + 1) * mosquito-max-tenth))
    [ set oestrid-scale (k * 0.5) ]
    set k k + 1
  ]
end

;REMOVE COASTLINE
to remove-coastline
  ask patches with [coast = true]
  [
     set-gray-scale
  ]
end

;REDUCE COAST
to reduce-coast
  ask patches with [coast = true]
  [
    ask patches in-radius 2 with [ocean = 0]
    [
         set mosquito-density (random-float (.5 * mosquito-max-tenth))
        set oestrid-density (random-float (.5 * oestrid-max-tenth))
        set-gray-scale
        ;set a coast reduce variable to just check before distributions are made
    ]
  ]
end
