;TO DOWNLOAD FULL CODE, HERE IS THE LINK:
;https://drive.google.com/open?id=0B2QMSJvcneSrME85Sjh0a1pkTE0


;EXTENSIONS
extensions [ gis
             array
             matrix
             table ]

;GLOBALS
globals [elevation-dataset
         vegetation-dataset
         vegetation-class-dataset
         precipitation-dataset
         vegetation-data-list
         vegetation-max
         vegetation-CP-list
         vegetation-CNP-list
         vegetation-PC-list
         vegetation-MH-list
         vegetation-ML-list
         vegetation-OH-list
         vegetation-OL-list
         vegetation-LS-list
         precipitation-data-list
         precipitation-max
         elevation-max
         mosquito-sigma
         oestrid-sigma
         mosquito-means-list
         oestrid-means-list
         mosquito-sigma-list
         oestrid-sigma-list
         mosquito-max-color
         oestrid-max-color
         mosquito-max-tenth-color
         oestrid-max-tenth-color
         mosquito-max
         oestrid-max
         mosquito-max-tenth
         oestrid-max-tenth
         mosquito-mean
         oestrid-mean
         visit-max
         kde-dataset
         max-k
         min-k
         ]

;PATCHES
patches-own [elevation
             vegetation-quality
             vegetation-type
             vegetation-beta
             precipitation-amt
             veg-paint
             elev-paint
             prec-paint
             mosquito-density
             oestrid-density
             coast
             water
             ocean
             river
             elevation-scale
             patch-max-avg-elevation
             patch-min-avg-elevation
             elevation-avg
             gray-scale
             mosquito-scale
             oestrid-scale
             distance-to-coast
             visitation
             visit-scale
             kde-estimate
             ]

;SETUP
to setup
  clear-all
  ;set insect-season 0
  load-elevation-gis
  set-vegetation-data-list
  ;set-precipitation-data-list
  ;set-insect-indices
  ;set-mosquito-activity
  ;set-oestrid-activity
  setup-patches
  load-veg-classification-gis
  set-vegetation-rank-lists
  set-vegetation-selection-season
  ;set-coastline
  new-population
  reset-ticks
end

;GO
to go
   ;set-mosquito-mean
   ;set-oestrid-mean
   ;go-patches
   ;set insect-season (insect-season + 1)
   ask turtles
   [
     ifelse (vegetation-beta = 10)
     [
       ;head in a random direction or rest
       ifelse ticks mod 2 = 0
       [ random-walk ]
       [ rest ]
     ]
     [
       ;walk straight from last heading
       straight-walk
     ]
   ]
   if (ticks mod 20 = 0)
   [ ask turtles [ enter-visitation ] ]
   tick
   if ticks = 15000 [stop]
end

;SETUP PATHCES
to setup-patches
   set-elevations
   ;ask patches with [water = false]
   ;[
    ;  set-elevation-scale
    ;  set-densities
   ;]
   ;ask patches
   ;[ set-gray-scale ]
   ;repeat 2 [diffuse-test]
   ask patches with [water = true] [ set pcolor blue ]
end

;GO PATCHES
to go-patches
   ;print "Time of year:"
   ;print time-of-year
   ask patches with [water = false]
   [ set-densities ]
  repeat 2 [diffuse-test]
end

;REST
to rest
  rt random-float 360
end

;RANDOM WALK
to random-walk
  rt random-float 360
  let done false
  if (patch-ahead 1 != nobody)
  [
     ask patch-ahead 1
     [
       if water = false
       [ set done true ]
     ]
  ]
  ifelse done = true
  [fd 1]
  [random-walk]
end

;STRAIGHT WALK
to straight-walk
  let right-turn 0
  let left-turn 0
  set right-turn random-float 5
  set left-turn random-float 5
  make-turn right-turn left-turn
  let done false
  if (patch-ahead 1 != nobody)
  [
     ask patch-ahead 1
     [
       if water = false
       [ set done true ]
     ]
  ]
  ifelse done = true
  [fd 2]
  [straight-walk]
end

;MAKE TURN
; turn right or left based on the larger turn angle
to make-turn [rturn lturn]  ; turtle procedure
  ;et turn (rturn - lturn)
  ifelse rturn > lturn
  [ rt rturn ]
  [ lt lturn ]
end

;DENSITY INCREASE
to clump-density-increase
   let p count patches with [water = false]
   let n (floor (0.03 * p))
   ask n-of n patches with [water = false]
   [
      set mosquito-density (mosquito-density + (2 * mosquito-max-tenth))
      set oestrid-density (oestrid-density + (2 * oestrid-max-tenth))
      if (mosquito-density > mosquito-max) [set mosquito-density mosquito-max]
      if (oestrid-density > oestrid-max) [set oestrid-density oestrid-max]
   ]
end

;DENSITY DECREASE
to clump-density-decrease
   let l count patches with [water = false]
   let m (floor (0.03 * l))
   ask n-of m patches with [water = false]
   [
   set mosquito-density (mosquito-density - (4 * mosquito-max-tenth))
   set oestrid-density (oestrid-density - (4 * oestrid-max-tenth))
   if (mosquito-density < 0) [set mosquito-density 0]
   if (oestrid-density < 0) [set oestrid-density 0]
   ]
end

;DIFFUSE
to diffuse-test
  let num-patches count patches
  ask patches with [water = false]
  [

    let x (count neighbors with [water = false or water = 0])
    let diffuse-hold-mos 0
    let diffuse-hold-oes 0
    let diffuse-package-mos 0
    let diffuse-package-oes 0
   ; let diffuse-amt 0.25
    if (x > 0)
    [
       set diffuse-hold-mos (diffuse-amt * mosquito-density)
       set diffuse-hold-oes (diffuse-amt * oestrid-density)
       set mosquito-density (mosquito-density - diffuse-hold-mos)
       set oestrid-density (oestrid-density - diffuse-hold-oes)
       if (mosquito-density < 0) [set mosquito-density 0]
       if (oestrid-density < 0) [set oestrid-density 0]
       set diffuse-package-mos (diffuse-hold-mos / x)
       set diffuse-package-oes (diffuse-hold-oes / x)
       ask neighbors with [water = false or water = 0]
       [
          set mosquito-density (mosquito-density + diffuse-package-mos)
          set oestrid-density (oestrid-density + diffuse-package-oes)
          if (mosquito-density > mosquito-max) [set mosquito-density mosquito-max]
          if (oestrid-density > oestrid-max) [set oestrid-density oestrid-max]
       ]
    ]

 ]
 ask patches [set-gray-scale]
end

;SET DENSITIES
to set-densities ;sets a random insect density with a max of the mean + 1 standard deviation and subtracts by an elevation scalar
   set mosquito-density ((random-float mosquito-max) - (mosquito-max-tenth)*(elevation-scale))
   set oestrid-density ((random-float oestrid-max) - (oestrid-max-tenth)*(elevation-scale))
end

;DISPLAY ELEVATION
to display-elevation   ;displays a gray scaled elevation map from the raster data
   gis:paint elevation-dataset 0
end

;DISPLAY VEGETATION
to display-vegetation ;displays a gray scaled vegetation map from the raster data
  gis:paint vegetation-dataset 0
end

;SET GRAY SCALE
to set-gray-scale ;sets the gray scale values based on the desities present at each patch
   set-mosquito-scale
   set-oestrid-scale
   set gray-scale (mosquito-scale + oestrid-scale)
   set pcolor gray-scale
end

;PAINT ELEVATION
to paint-elevation
  let elev-tenth (0.1 * elevation-max)
  ask patches with [water = false] [ if (elevation > 0) and (elevation <= elev-tenth) [ set elev-paint 1 ]]
  ask patches with [water = false] [ if (elevation > (1 * elev-tenth)) and (elevation <= (2 * elev-tenth)) [ set elev-paint 2 ]]
  ask patches with [water = false] [ if (elevation > (2 * elev-tenth)) and (elevation <= (3 * elev-tenth)) [ set elev-paint 3 ]]
  ask patches with [water = false] [ if (elevation > (3 * elev-tenth)) and (elevation <= (4 * elev-tenth)) [ set elev-paint 4 ]]
  ask patches with [water = false] [ if (elevation > (4 * elev-tenth)) and (elevation <= (5 * elev-tenth)) [ set elev-paint 5 ]]
  ask patches with [water = false] [ if (elevation > (5 * elev-tenth)) and (elevation <= (6 * elev-tenth)) [ set elev-paint 6 ]]
  ask patches with [water = false] [ if (elevation > (6 * elev-tenth)) and (elevation <= (7 * elev-tenth)) [ set elev-paint 7 ]]
  ask patches with [water = false] [ if (elevation > (7 * elev-tenth)) and (elevation <= (8 * elev-tenth)) [ set elev-paint 8 ]]
  ask patches with [water = false] [ if (elevation > (8 * elev-tenth)) and (elevation <= (9 * elev-tenth)) [ set elev-paint 9 ]]
  ask patches with [water = false] [ if (elevation > (9 * elev-tenth)) and (elevation <= (10 * elev-tenth)) [ set elev-paint 9.9 ]]
  ask patches with [water = false] [ set pcolor elev-paint ]
  ask patches with [water = true] [ set pcolor blue ]
end

;PIANT VEGETATION
to paint-vegetation
  let veg-max-tenth (0.1 * vegetation-max)
  ask patches with [water = false] [ if (vegetation-quality > 0) and (vegetation-quality <= (veg-max-tenth)) [ set veg-paint 61 ]]
  ask patches with [water = false] [ if (vegetation-quality > veg-max-tenth) and (vegetation-quality <= (2 * veg-max-tenth)) [ set veg-paint 62 ]]
  ask patches with [water = false] [ if (vegetation-quality > (2 * veg-max-tenth)) and (vegetation-quality <= (3 * veg-max-tenth)) [ set veg-paint 63 ]]
  ask patches with [water = false] [ if (vegetation-quality > (3 * veg-max-tenth)) and (vegetation-quality <= (4 * veg-max-tenth)) [ set veg-paint 64 ]]
  ask patches with [water = false] [ if (vegetation-quality > (4 * veg-max-tenth)) and (vegetation-quality <= (5 * veg-max-tenth)) [ set veg-paint 65 ]]
  ask patches with [water = false] [ if (vegetation-quality > (5 * veg-max-tenth)) and (vegetation-quality <= (6 * veg-max-tenth)) [ set veg-paint 66 ]]
  ask patches with [water = false] [ if (vegetation-quality > (6 * veg-max-tenth)) and (vegetation-quality <= (7 * veg-max-tenth)) [ set veg-paint 67 ]]
  ask patches with [water = false] [ if (vegetation-quality > (7 * veg-max-tenth)) and (vegetation-quality <= (8 * veg-max-tenth)) [ set veg-paint 68 ]]
  ask patches with [water = false] [ if (vegetation-quality > (8 * veg-max-tenth)) and (vegetation-quality <= (10 * veg-max-tenth)) [ set veg-paint 69 ]]
  ask patches with [water = false] [ set pcolor veg-paint ]
end

;PAINT PRECIPITATION
to paint-precipitation
  let prec-tenth (0.1 * precipitation-max)
  ask patches with [water = false] [ if (precipitation-amt > 0) and (precipitation-amt <= (prec-tenth)) [set prec-paint 1 ]]
  ask patches with [water = false] [ if (precipitation-amt > prec-tenth) and (precipitation-amt <= (2 * prec-tenth)) [set prec-paint 2 ]]
  ask patches with [water = false] [ if (precipitation-amt > (2 * prec-tenth)) and (precipitation-amt <= (3 * prec-tenth)) [set prec-paint 3 ]]
  ask patches with [water = false] [ if (precipitation-amt > (3 * prec-tenth)) and (precipitation-amt <= (4 * prec-tenth)) [set prec-paint 4 ]]
  ask patches with [water = false] [ if (precipitation-amt > (4 * prec-tenth)) and (precipitation-amt <= (5 * prec-tenth)) [set prec-paint 5 ]]
  ask patches with [water = false] [ if (precipitation-amt > (5 * prec-tenth)) and (precipitation-amt <= (6 * prec-tenth)) [set prec-paint 6 ]]
  ask patches with [water = false] [ if (precipitation-amt > (6 * prec-tenth)) and (precipitation-amt <= (7 * prec-tenth)) [set prec-paint 7 ]]
  ask patches with [water = false] [ if (precipitation-amt > (7 * prec-tenth)) and (precipitation-amt <= (8 * prec-tenth)) [set prec-paint 8 ]]
  ask patches with [water = false] [ if (precipitation-amt > (8 * prec-tenth)) and (precipitation-amt <= (9 * prec-tenth)) [set prec-paint 9 ]]
  ask patches with [water = false] [ if (precipitation-amt > (9 * prec-tenth)) and (precipitation-amt <= (10 * prec-tenth)) [set prec-paint 9.9 ]]
  ask patches with [water = false] [ set pcolor prec-paint ]
end

;SET ELEVATIONS
to set-elevations ;resamples elevation-dataset to patches unsing the nearest neighbor method
   ask patches
   [
      if (elevation < 0) ;ocean has negative raster values
      [
         set mosquito-density 0
         set oestrid-density 0
         set mosquito-scale 0
         set oestrid-scale 0
         set pcolor 0
         set water true
         set ocean true
      ]
      if (elevation >= 0)
      [
         set water false
         set ocean false
      ]
   ]
end

;SET ELEVATION SCALE
to set-elevation-scale ;determines the level of elevation scaling for insect densities
  if (elevation < 0) [set elevation-scale 10]
  if (elevation >= 0) and (elevation < 30) [ set elevation-scale 0 ]
  if (elevation >= 30) and (elevation < 60) [ set elevation-scale 2 ]
  if (elevation >= 60) and (elevation < 200) [ set elevation-scale 5 ]
  if (elevation >= 200) and (elevation < 500 ) [ set elevation-scale 8 ]
  if (elevation >= 500) and (elevation < elevation-max ) [ set elevation-scale 9 ]
end

;SET MOSQUITO SCALE
to set-mosquito-scale ;determines the gray scale value for mosquito densities
  let c 0
  while [ c < 10 ]
  [
    if (mosquito-density >= (c * mosquito-max-tenth-color)) and (mosquito-density < ((c + 1) * mosquito-max-tenth-color))
    [ set mosquito-scale (c * 0.5) ]
    set c c + 1
  ]
end

;SET OESTRID SCALE
to set-oestrid-scale ;determines the gray scale value for fly densities
  let k 0
  while [ k < 10 ]
  [
    if (oestrid-density >= (k * mosquito-max-tenth)) and (oestrid-density < ((k + 1) * mosquito-max-tenth))
    [ set oestrid-scale (k * 0.5) ]
    set k k + 1
  ]
end

to set-insect-indices
  ;Time frames are early and late June, July, and August
  set mosquito-means-list [0.17 0.45 0.58 0.61 0.56 0.30]
  set oestrid-means-list [0.08 0.30 0.43 0.47 0.41 0.16]
  set mosquito-sigma-list [0.133636  0.195714  0.179289  0.156692  0.191071  0.149130]
  set oestrid-sigma-list [0.100017  0.212407  0.207147  0.176469  0.224342  0.132172]
end

;SET MOSQUITOS LIST
to set-mosquito-means-list   ;reads in max mosquito idexes file and loads them into the mosquito-indexes-max array
  set mosquito-means-list []
  let i 0
  let temp ""
  set mosquito-sigma 0.126148716416492
  file-open "mosquito_means.txt"
  while [file-at-end? = false]
  [
    set temp file-read-line
    set mosquito-means-list lput (read-from-string temp) mosquito-means-list
  ]
  file-close
  set mosquito-max-color ((max mosquito-means-list) + mosquito-sigma)
  set mosquito-max-tenth-color (mosquito-max-color / 10)
end

;SET OESTRID LIST
to set-oestrid-means-list   ;reads in max mosquito idexes file and loads them into the oestrid-indexes-max array
  set oestrid-means-list []
  let j 0
  let temp2 ""
  file-open "oestrid_means.txt"
  set oestrid-sigma 0.124657702160509
  while [file-at-end? = false]
  [
     set temp2 file-read-line
     set oestrid-means-list lput (read-from-string temp2) oestrid-means-list
  ]
  file-close
  set oestrid-max-color ((max oestrid-means-list) + oestrid-sigma)
  set oestrid-max-tenth-color (oestrid-max-color / 10)
end

;SET VEG LIST
to set-vegetation-data-list
  set vegetation-data-list ["GreenMatrix1.asc" "GreenMatrix2.asc" "GreenMatrix3.asc" "GreenMatrix4.asc" "GreenMatrix5.asc" "GreenMatrix6.asc" "GreenMatrix7.asc"
                            "GreenMatrix8.asc" "GreenMatrix9.asc" "GreenMatrix10.asc" "GreenMatrix11.asc" "GreenMatrix12.asc" "GreenMatrix13.asc" "GreenMatrix14.asc"
                            "GreenMatrix15.asc" "GreenMatrix16.asc" "GreenMatrix17.asc"]
end

;SET PRECIPITATION LIST
to set-precipitation-data-list
  set precipitation-data-list ["Precipitation1.asc" "Precipitation2.asc" "Precipitation3.asc" "Precipitation4.asc" "Precipitation5.asc" "Precipitation6.asc"
                               "Precipitation7.asc" "Precipitation8.asc" "Precipitation9.asc" "Precipitation10.asc" "Precipitation11.asc" "Precipitation12.asc"]
end

to show-veg-type
ask patches with [vegetation-type > 0]
[ if (vegetation-type = 1)[set pcolor brown]
  if (vegetation-type = 2)[set pcolor 63]
  if (vegetation-type = 3)[set pcolor green]
  if (vegetation-type = 4)[set pcolor turquoise]
  if (vegetation-type = 5)[set pcolor 82]
  if (vegetation-type = 6)[set pcolor sky]
  if (vegetation-type = 7)[set pcolor white]
  if (vegetation-type = 8)[set pcolor 2]
  if (vegetation-type = 9)[set pcolor violet]
]
end

;SET VEGETATION RANK LISTS
;classes ranked relative to the season
to set-vegetation-rank-lists
  set vegetation-CP-list [1 10 9 7 8 1 1 1 9]
  set vegetation-CNP-list [1 9 10 9 7 1 1 1 10]
  set vegetation-PC-list [1 8 10 10 7 1 1 1 10]
  set vegetation-MH-list [10 1 10 5 7 1 1 1 10]
  set vegetation-ML-list [3 1 10 8 5 1 1 1 10]
  set vegetation-OH-list [10 2 2 3 1 1 1 1 2]
  set vegetation-OL-list [10 1 4 6 1 1 1 1 4]
  set vegetation-LS-list [10 10 7 10 1 1 1 1 7]
end

;SET VEG SELECTION SEASON
to set-vegetation-selection-season
  if veg-selection-season = 0 [ set-vegetation-betas-CP ]
  if veg-selection-season = 1 [ set-vegetation-betas-CNP ]
  if veg-selection-season = 2 [ set-vegetation-betas-PC ]
  if veg-selection-season = 3 [ set-vegetation-betas-MH ]
  if veg-selection-season = 4 [ set-vegetation-betas-ML ]
  if veg-selection-season = 5 [ set-vegetation-betas-OH ]
  if veg-selection-season = 6 [ set-vegetation-betas-OL ]
  if veg-selection-season = 7 [ set-vegetation-betas-LS ]
end

;COLOR POSITIVE BETA PATCHES
to color-high-beta
  show-veg-type
  ask patches with [ vegetation-beta = 10]
  [ set pcolor gray ]
end

;SET VEGETATION BETAS
to set-vegetation-betas-CP
  ask patches with [water = false]
  [
    if vegetation-type = 1 [set vegetation-beta (item 0 vegetation-CP-list) ]
    if vegetation-type = 2 [set vegetation-beta (item 1 vegetation-CP-list) ]
    if vegetation-type = 3 [set vegetation-beta (item 2 vegetation-CP-list) ]
    if vegetation-type = 4 [set vegetation-beta (item 3 vegetation-CP-list) ]
    if vegetation-type = 5 [set vegetation-beta (item 4 vegetation-CP-list) ]
    if vegetation-type = 6 [set vegetation-beta (item 5 vegetation-CP-list) ]
    if vegetation-type = 7 [set vegetation-beta (item 6 vegetation-CP-list) ]
    if vegetation-type = 8 [set vegetation-beta (item 7 vegetation-CP-list) ]
    if vegetation-type = 9 [set vegetation-beta (item 8 vegetation-CP-list) ]
  ]
end

to set-vegetation-betas-CNP
  ask patches with [water = false]
  [
    if vegetation-type = 1 [set vegetation-beta (item 0 vegetation-CNP-list) ]
    if vegetation-type = 2 [set vegetation-beta (item 1 vegetation-CNP-list) ]
    if vegetation-type = 3 [set vegetation-beta (item 2 vegetation-CNP-list) ]
    if vegetation-type = 4 [set vegetation-beta (item 3 vegetation-CNP-list) ]
    if vegetation-type = 5 [set vegetation-beta (item 4 vegetation-CNP-list) ]
    if vegetation-type = 6 [set vegetation-beta (item 5 vegetation-CNP-list) ]
    if vegetation-type = 7 [set vegetation-beta (item 6 vegetation-CNP-list) ]
    if vegetation-type = 8 [set vegetation-beta (item 7 vegetation-CNP-list) ]
    if vegetation-type = 9 [set vegetation-beta (item 8 vegetation-CNP-list) ]
  ]
end

to set-vegetation-betas-PC
  ask patches with [water = false]
  [
    if vegetation-type = 1 [set vegetation-beta (item 0 vegetation-PC-list) ]
    if vegetation-type = 2 [set vegetation-beta (item 1 vegetation-PC-list) ]
    if vegetation-type = 3 [set vegetation-beta (item 2 vegetation-PC-list) ]
    if vegetation-type = 4 [set vegetation-beta (item 3 vegetation-PC-list) ]
    if vegetation-type = 5 [set vegetation-beta (item 4 vegetation-PC-list) ]
    if vegetation-type = 6 [set vegetation-beta (item 5 vegetation-PC-list) ]
    if vegetation-type = 7 [set vegetation-beta (item 6 vegetation-PC-list) ]
    if vegetation-type = 8 [set vegetation-beta (item 7 vegetation-PC-list) ]
    if vegetation-type = 9 [set vegetation-beta (item 8 vegetation-PC-list) ]
  ]
end

to set-vegetation-betas-MH
  ask patches with [water = false]
  [
    if vegetation-type = 1 [set vegetation-beta (item 0 vegetation-MH-list) ]
    if vegetation-type = 2 [set vegetation-beta (item 1 vegetation-MH-list) ]
    if vegetation-type = 3 [set vegetation-beta (item 2 vegetation-MH-list) ]
    if vegetation-type = 4 [set vegetation-beta (item 3 vegetation-MH-list) ]
    if vegetation-type = 5 [set vegetation-beta (item 4 vegetation-MH-list) ]
    if vegetation-type = 6 [set vegetation-beta (item 5 vegetation-MH-list) ]
    if vegetation-type = 7 [set vegetation-beta (item 6 vegetation-MH-list) ]
    if vegetation-type = 8 [set vegetation-beta (item 7 vegetation-MH-list) ]
    if vegetation-type = 9 [set vegetation-beta (item 8 vegetation-MH-list) ]
  ]
end

to set-vegetation-betas-ML
  ask patches with [water = false]
  [
    if vegetation-type = 1 [set vegetation-beta (item 0 vegetation-ML-list) ]
    if vegetation-type = 2 [set vegetation-beta (item 1 vegetation-ML-list) ]
    if vegetation-type = 3 [set vegetation-beta (item 2 vegetation-ML-list) ]
    if vegetation-type = 4 [set vegetation-beta (item 3 vegetation-ML-list) ]
    if vegetation-type = 5 [set vegetation-beta (item 4 vegetation-ML-list) ]
    if vegetation-type = 6 [set vegetation-beta (item 5 vegetation-ML-list) ]
    if vegetation-type = 7 [set vegetation-beta (item 6 vegetation-ML-list) ]
    if vegetation-type = 8 [set vegetation-beta (item 7 vegetation-ML-list) ]
    if vegetation-type = 9 [set vegetation-beta (item 8 vegetation-ML-list) ]
  ]
end

to set-vegetation-betas-OH
  ask patches with [water = false]
  [
    if vegetation-type = 1 [set vegetation-beta (item 0 vegetation-OH-list) ]
    if vegetation-type = 2 [set vegetation-beta (item 1 vegetation-OH-list) ]
    if vegetation-type = 3 [set vegetation-beta (item 2 vegetation-OH-list) ]
    if vegetation-type = 4 [set vegetation-beta (item 3 vegetation-OH-list) ]
    if vegetation-type = 5 [set vegetation-beta (item 4 vegetation-OH-list) ]
    if vegetation-type = 6 [set vegetation-beta (item 5 vegetation-OH-list) ]
    if vegetation-type = 7 [set vegetation-beta (item 6 vegetation-OH-list) ]
    if vegetation-type = 8 [set vegetation-beta (item 7 vegetation-OH-list) ]
    if vegetation-type = 9 [set vegetation-beta (item 8 vegetation-OH-list) ]
  ]
end

to set-vegetation-betas-OL
  ask patches with [water = false]
  [
    if vegetation-type = 1 [set vegetation-beta (item 0 vegetation-OL-list) ]
    if vegetation-type = 2 [set vegetation-beta (item 1 vegetation-OL-list) ]
    if vegetation-type = 3 [set vegetation-beta (item 2 vegetation-OL-list) ]
    if vegetation-type = 4 [set vegetation-beta (item 3 vegetation-OL-list) ]
    if vegetation-type = 5 [set vegetation-beta (item 4 vegetation-OL-list) ]
    if vegetation-type = 6 [set vegetation-beta (item 5 vegetation-OL-list) ]
    if vegetation-type = 7 [set vegetation-beta (item 6 vegetation-OL-list) ]
    if vegetation-type = 8 [set vegetation-beta (item 7 vegetation-OL-list) ]
    if vegetation-type = 9 [set vegetation-beta (item 8 vegetation-OL-list) ]
  ]
end

to set-vegetation-betas-LS
  ask patches with [water = false]
  [
    if vegetation-type = 1 [set vegetation-beta (item 0 vegetation-LS-list) ]
    if vegetation-type = 2 [set vegetation-beta (item 1 vegetation-LS-list) ]
    if vegetation-type = 3 [set vegetation-beta (item 2 vegetation-LS-list) ]
    if vegetation-type = 4 [set vegetation-beta (item 3 vegetation-LS-list) ]
    if vegetation-type = 5 [set vegetation-beta (item 4 vegetation-LS-list) ]
    if vegetation-type = 6 [set vegetation-beta (item 5 vegetation-LS-list) ]
    if vegetation-type = 7 [set vegetation-beta (item 6 vegetation-LS-list) ]
    if vegetation-type = 8 [set vegetation-beta (item 7 vegetation-LS-list) ]
    if vegetation-type = 9 [set vegetation-beta (item 8 vegetation-LS-list) ]
  ]
end

;SET MOSQUITO MEAN
to set-mosquito-mean
   set mosquito-max ((item insect-season  mosquito-means-list) + mosquito-sigma)
   set mosquito-mean (item insect-season mosquito-means-list)
   set mosquito-max-tenth (0.1 * mosquito-max)
end

;SET OESTRID MEAN
to set-oestrid-mean
  set oestrid-max ((item insect-season oestrid-means-list) + oestrid-sigma)
  set oestrid-mean (item insect-season oestrid-means-list)
  set oestrid-max-tenth (0.1 * oestrid-max)
end

;SET INSECT ACTIVITIES
to set-mosquito-activity
  set mosquito-mean (item insect-season mosquito-means-list)
  set mosquito-sigma (item insect-season mosquito-sigma-list)
  set mosquito-max (mosquito-mean + mosquito-sigma)
  set mosquito-max-tenth (0.1 * mosquito-max)
end

to set-oestrid-activity
  set oestrid-mean (item insect-season oestrid-means-list)
  set oestrid-sigma (item insect-season oestrid-sigma-list)
  set oestrid-max (oestrid-mean + oestrid-sigma)
  set oestrid-max-tenth (0.1 * oestrid-max)
end

;LOAD ELEVATION
to load-elevation-gis   ;loads in the north slope GIS elevation raster to a dataset in NetLogo
  set elevation-dataset gis:load-dataset "NorthSlopeFull.asc"
  set elevation-max (gis:maximum-of elevation-dataset)
  gis:set-world-envelope (gis:envelope-union-of (gis:envelope-of elevation-dataset))
  gis:apply-raster elevation-dataset elevation

end

;PRECIPITATION
to load-precipitation-gis   ;loads in the north slope GIS elevation raster to a dataset in NetLogo
  let pmatrix (item precipitation-matrix precipitation-data-list)
  set precipitation-dataset gis:load-dataset pmatrix
  set precipitation-max (gis:maximum-of precipitation-dataset)
  gis:set-sampling-method precipitation-dataset "BILINEAR"
  gis:set-world-envelope (gis:envelope-union-of (gis:envelope-of precipitation-dataset))
  gis:apply-raster precipitation-dataset precipitation-amt
end

;LOAD VEGETATION
to load-gis-vegetation
  let matrix (item veg-matrix vegetation-data-list)
  set vegetation-dataset gis:load-dataset matrix
  set vegetation-max (gis:maximum-of vegetation-dataset)
  gis:set-world-envelope (gis:envelope-union-of (gis:envelope-of vegetation-dataset))
  gis:apply-raster vegetation-dataset vegetation-quality
  correct-ndvi
end

;LOAD VEGETATION TYPE
to load-veg-classification-gis
  set vegetation-class-dataset gis:load-dataset "NorthSlopeVegetation.asc"
  gis:set-world-envelope (gis:envelope-union-of (gis:envelope-of vegetation-class-dataset))
  gis:apply-raster vegetation-class-dataset vegetation-type
  correct-vegetation
end

;LOAD KDE
to load-kde-gis
  set kde-dataset gis:load-dataset file-name-kde-in
  gis:set-sampling-method kde-dataset "BILINEAR"
  gis:set-world-envelope (gis:envelope-union-of (gis:envelope-of kde-dataset))
  gis:apply-raster kde-dataset kde-estimate
end

;CORRECT VEGETATION TYPE
to correct-vegetation
  ;Removes clouds and cloud shadows
  ask patches
  [
     while [(vegetation-type = 7) or (vegetation-type = 8)]
     [

       let rand random 3
       let tempx (rand - 1)
       set rand random 3
       let tempy (rand - 1)

       if(tempx + pxcor <= 64) and (tempx + pxcor > -65) and (tempy + pycor <= 64) and (tempy + pycor > -65)
       [
         let veg-temp ([vegetation-type] of patch-at tempx tempy)
         if (not(veg-temp = 7) and not(veg-temp = 8))
         [ set vegetation-type veg-temp ]
       ]
     ]
   ]
end

;SET COASTLINE
to set-coastline
  ask patches
  [
     if water = false
     [
        if any? neighbors with [water = true]
        [
           set coast true
        ]
     ]
  ]
end

;SHOW COASTLINE
to show-coastline
   ask patches with [coast = true]
   [
      set pcolor 86
   ]
end

;REMOVE COASTLINE
to remove-coastline
  ask patches with [coast = true]
  [
     set-gray-scale
  ]
end

;REDUCE COAST
to reduce-coast
  ask patches with [coast = true]
  [
    ask patches in-radius 2 with [water = false]
    [
         set mosquito-density (random-float (.5 * mosquito-max-tenth))
        set oestrid-density (random-float (.5 * oestrid-max-tenth))
        set-gray-scale
        ;set a coast reduce variable to just check before distributions are made
    ]
  ]
end

;MAKE VISITATION COORDINATES
to make-visitation-coordinates
  file-open file-name
  ask patches with [visitation > 0]
  [
    file-print (word pxcor "," pycor)
  ]
  file-close
end

;ENTER VISITATION
to enter-visitation
   ask patch-here
    [
      set visitation (visitation + 1)
    ]
end

;PAINT VISITATION
to paint-visitations
  set visit-max (max [visitation] of patches)
  let visit-max-tenth (0.1 * visit-max)
  ask patches
  [
   if (visitation = 0) [ set visit-scale 1 ]
   if (visitation > 0) and (visitation <= (visit-max-tenth)) [ set visit-scale 2 ]
   if (visitation > visit-max-tenth) and (visitation <= (2 * visit-max-tenth)) [ set visit-scale 3 ]
   if (visitation > (2 * visit-max-tenth)) and (visitation <= (3 * visit-max-tenth)) [ set visit-scale 4 ]
   if (visitation > (3 * visit-max-tenth)) and (visitation <= (4 * visit-max-tenth)) [ set visit-scale 5 ]
   if (visitation > (4 * visit-max-tenth)) and (visitation <= (5 * visit-max-tenth)) [ set visit-scale 6 ]
   if (visitation > (5 * visit-max-tenth)) and (visitation <= (6 * visit-max-tenth)) [ set visit-scale 7 ]
   if (visitation > (6 * visit-max-tenth)) and (visitation <= (7 * visit-max-tenth)) [ set visit-scale 8 ]
   if (visitation > (7 * visit-max-tenth)) and (visitation <= (8 * visit-max-tenth)) [ set visit-scale 9 ]
   if (visitation > (8 * visit-max-tenth)) and (visitation <= (10 * visit-max-tenth)) [ set visit-scale 9.9 ]
   if (water = true) [ set pcolor blue ]
   set pcolor visit-scale
  ]
end

;FILTER VISITATIONS
to filter-visitations
  ask patches with [visitation <= visit-filter] [set visitation 0]
end

;CLEAR VISITATIONS
to clear-visitations
  ask patches [ set visitation 0 ]
end

;REMOVE TURTLES
to remove-turtles
   ask turtles [ die ]
end

;MAKE NEW TURTLE POPULATION
to new-population
  reset-ticks
  create-turtles population
  [
    set color white; - 2 + random 5  ;; random shades look nice
    set size 1.75  ;; easier to see
    let done false
    let x 0
    let y 0
    while [done != true]
    [
       set x random-xcor
       set y random-ycor
       ask patch-at x y
       [
         if (water = false)
         [
           set done true
         ]
       ]
    ]
    setxy x y
  ]
end

;CORECT NDVI
to correct-ndvi
  let fix-count (count patches with [water = false and vegetation-quality = 0])
  ask patches with [water = false and vegetation-quality = 0]
  [
    let neigh-count (count neighbors with [water = false and vegetation-quality > 0])
    let ndvi-sum 0
    ask neighbors with [water = false and vegetation-quality > 0]
    [
      set ndvi-sum (ndvi-sum + vegetation-quality)
    ]
    if (neigh-count > 0) [set vegetation-quality (ndvi-sum / neigh-count) ]
  ]
  if (fix-count > 0) [correct-ndvi]
end